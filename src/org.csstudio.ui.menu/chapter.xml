<?xml version='1.0'?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0"
         xml:id="ch_menues">
  <title>CSS menus - org.csstudio.ui.menu<indexterm><primary>org.csstudio.ui.menu</primary></indexterm></title>
  <para>The plugin <quote>org.csstudio.ui.menu</quote> defines through 
  extensions the CSS Menu (which appears in the menu bar) and the 
  context sensitive pop-up submenu for object adaptable to 
  <code>org.csstudio.csdata.ProcessVariable</code>. The plugin <quote>org.csstudio.ui.menu</quote>
  provides examples of how to contribute actions/commands, how to implement
  a view that displays the pop-up menu, and with the same view one can
  test whether a popup action/commands actually displays as intended.</para>
  <sect1>
    <title>The CSS main menu</title>
    <figure id="fig_ui_menu_main">
      <title>The CSS main menu</title>
      <mediaobject><imageobject>
      <imagedata fileref="ui_menu_main.png" format="PNG"/></imageobject></mediaobject>
    </figure>
    <para>The overall structure of the menu is:</para>
    <programlisting>CSS (id: css)
 - Display (id: display)
 - Alarm (id: alarm)
 - Diagnostic (id: diag)
 - Debugging (id: debugging)
 - Configuration (id: configuration)
 - Management (id: management)
 - Editors (id: editors)
 - Utilities (id: utility)
 - Trends (id: trends)
 - Test (id: test)
 - Other (id: other)</programlisting>
    <para>where the each line has the name of each sub-menus and the 
    <quote>id</quote> which is needed to define contributions to those 
    menus. Only sub-menus that have contributions are going to be 
    displayed</para>
    <para>The following example adds a command to the <code>display</code>
    sub-menu:</para>
    <programlisting><![CDATA[<plugin>
    ...
    <extension
         point="org.eclipse.ui.menus">
      ...
      <menuContribution
            allPopups="false"
            locationURI="menu:display">
         <command
               commandId="org.eclipse.ui.views.showView"
               icon="icons/my_icon.png"
               label="My View"
               style="push"
               tooltip="Show My View">
            <parameter
                  name="org.eclipse.ui.views.showView.viewId"
                  value="org.csstudio.my_tool.MyView">
            </parameter>
         </command>
      </menuContribution>
   </extension>]]>
    </programlisting>
    <para>This example shows the rather common case where your menu
    entry opens a View, using the command <code>org.eclipse.ui.views.showView</code>
    that is provided by Eclipse. That command expects a command parameter
    to provide the ID of the view to open.
    </para>
    <para>You can of course also add new commands to the menus. In that case,
    you also need to define a handler for your command.
    Refer to the Eclipse online help on commands and handlers for details.
    </para>
  </sect1>
  <sect1>
    <title>The Process Variable popup-menu</title>
    <figure id="fig_ui_menu_popup">
      <title>The Process Variable popup-menu</title>
      <mediaobject><imageobject>
      <imagedata fileref="ui_menu_popup.png" format="PNG"/></imageobject></mediaobject>
    </figure>
    <para>This popup menu (id: 
    <code>org.csstudio.ui.menu.popup.processvariable</code>) will 
    appear only on objects that are adaptable to 
    <code>org.csstudio.csdata.ProcessVariable</code>. Given that the 
    whole menu is hidden/displayed, one only has to contribute commands 
    without worrying about the display condition for each command. It 
    also makes it easier for the user to predict which entries he will 
    find in the menu and where they are located: if the <quote>Process 
    Variable</quote> sub-menu is present, then the object is of the 
    right type and all the same commands are going to be available in 
    the same order.</para>
    <para>The following example adds a command to the popup menu:</para>
    <programlisting><![CDATA[<plugin>
   ...
   <extension
         point="org.eclipse.ui.menus">
      ...
      <menuContribution
            allPopups="false"
            locationURI="popup:org.csstudio.ui.menu.popup.processvariable">
         <command
               commandId="org.csstudio.display.waterfall.SomeCommand"
               icon="icons/water.png"
               style="push">
         </command>
      </menuContribution>
      ...
   </extension>
   ...
</plugin>]]></programlisting>
    <para>To handle the received PV names in a command handler,
    see <xref linkend="chap_org.csstudio.ui.util"/>
    </para>
    <para>The following example adds an action to the popup menu
    (note the contribution to the <code>main</code> section):
    </para>
    <programlisting><![CDATA[<plugin>
   ...
   <extension
         point="org.eclipse.ui.popupMenus">
      ...
      <objectContribution
            adaptable="true"
            id="org.csstudio.ui.menu.test.objectContribution1"
            objectClass="org.csstudio.csdata.ProcessVariable">
         <action
               class="org.csstudio.ui.menu.test.TestPVAction"
               icon="icons/test.png"
               id="org.csstudio.ui.menu.test.testpvaction"
               label="Test Action"
               menubarPath="org.csstudio.ui.menu.popup.processvariable/main">
         </action>
      </objectContribution>
      ...
   </extension>
   ...
</plugin>]]></programlisting>

  </sect1>
</chapter>
