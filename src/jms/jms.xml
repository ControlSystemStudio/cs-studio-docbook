<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
         xml:id="ch_jms">
<title>Java Message Server</title>

<para>CSS uses a Java Message Server (JMS)<indexterm><primary>Java Message Server, JMS</primary></indexterm>
for several purposes.
Log messages from CSS applications in general can optionally be
sent to JMS, see <xref linkend="ch_logging"/>.
The alarm system uses JMS for the communication between the
alarm server and clients.
</para>

<sect1>  <title>Apache ActiveMQ Server</title>
<para>CSS uses Apache ActiveMQ, a free and open-source implementation of JMS
available from
<link xlink:href="http://activemq.apache.org">http://activemq.apache.org</link>.
</para>
<para>Fundamentally, ActiveMQ is a portable Java application, but the
scripts to start it are slightly different for Windows and other operating
systems, so assert that you download the version suitable for your computer.
After downloading it, the ActiveMQ server can be started like this:
</para>
<programlisting>cd [activemq_install_dir]
bin/activemq
</programlisting>
<para>At least that used to be the case. With recent versions,
an additional argument <code>start</code> to start
respectively <code>stop</code> to stop the server seems
to be required.
As a very basic test on Unix and OS X, you can check if the server is listening
on port 61616:
</para>
<programlisting>netstat -an | fgrep 61616</programlisting>
<para>The page
<link xlink:href="http://sourceforge.net/apps/trac/cs-studio/wiki/JavaMessageServer">http://sourceforge.net/apps/trac/cs-studio/wiki/JavaMessageServer</link>
has more details on how to adjust the default JMS configuration.
For example, you probably want to disable parts of JMS that are not required for operation
with CSS.
</para>
</sect1>

<sect1>  <title>Client (CSS) Configuration</title>
<para>To use JMS for logging or the alarm system, CSS needs the
URL of your JMS instance. It should be of the form
<programlisting>failover:(tcp://your_jms_host:61616)
</programlisting>
<quote>Failover</quote> with a single server instructs the client
to automatically re-connect after network problems.
Actual failover between multiple JMS instances is also possible,
but for details you need to refer to the Apache ActiveMQ documentation.
</para>
</sect1>

<sect1>  <title>Testing your Setup</title>
<para>As a basic test of your JMS setup,
you can enable JMS logging in your CSS product,
for example by adding these lines to your
plugin customization file (see <xref linkend="ch_preferences"/>):
</para>
<programlisting>org.csstudio.logging/console_level=FINE
org.csstudio.logging/jms_level=FINE
org.csstudio.logging/jms_url=failover:(tcp://your_jms_host:61616)
</programlisting>
<para>As a result, CSS should send several log messages to JMS.
You can verify this by starting the JMS Monitor,
see <xref linkend="ch_jms_monitor"/>, to view messages
for the <code>LOG</code> Topic.
</para>
<para>While you should probably disable this in a production setup,
the default configuration of ActiveMQ includes a web browser interface.
It is accessible at
<link xlink:href="http://localhost:8161/admin">http://localhost:8161/admin</link>
on the host where JMS is running.
It can display who is connected to JMS and what topic each connection is reading
or writing.
</para>
</sect1>

<sect1>  <title>Message Types</title>
<para>All JMS messages used by CSS are of the <code>MapMessage</code>
type. Fundamentally, this allows messages with arbitrarily named string
properties for content.
In reality, however, messages are most useful when the involved applications
understand the messages.
For example, every message shall have a <code>TYPE</code> property.
CSS log messages as sent by the plugin <code>org.csstudio.logging</code>
(see <xref linkend="ch_logging"/>) have the following properties:
</para>
<itemizedlist>
<listitem><code>TYPE</code>: Set to <quote>log</quote> to identify as log message.</listitem>
<listitem><code>TEXT</code>: The actual log message.</listitem>
<listitem><code>SEVERITY</code>: Log level, for example <quote>SEVERE</quote> or <quote>FINE</quote>.
                                 The exact severity may depend on the underlying logging system.</listitem> 
<listitem><code>CREATETIME</code>: Time when message was created.
                           Format must be <code>yyyy-MM-dd HH:mm:ss.SSS</code></listitem> 
<listitem><code>CLASS</code>: Name of (Java) class were message was created.</listitem>
<listitem><code>NAME</code>: Name of Java method</listitem>
<listitem><code>APPLICATION_ID</code>: Application name like <quote>CSS</quote> or <quote>AlarmServer</quote></listitem>
<listitem><code>HOST</code>: Host name running the application.</listitem>
<listitem><code>USER</code>: Name of user who was running the application.</listitem>
</itemizedlist>
<para>The content of messages exchanged within the alarm system or from for example
a tool that logs write actions from an operator interface should try to use the same
properties as much as possible.
</para>
</sect1>

<sect1 xml:id="sec_msg_rdb_schema">  <title>JMS logging to RDB</title>
<para>The original RDB schema for logging JMS messages as shown in
<xref linkend="fig_jmsschema"/>was developed for the DESY version of CSS.
</para>

<figure xml:id="fig_jmsschema">  <title>Message RDB Schema</title>
  <mediaobject>
    <imageobject><imagedata fileref="schema.png" width="100%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>The column <quote>DATUM</quote> (German for date) holds the time when a message
was written to the RDB. All other message properties like <code>TEXT</code> and
<code>CREATETIME</code> are written to the MESSAGE_CONTENT and MSG_PROPERTY_TYPE
tables.
This schema is very compact and generic.
On the other hand, it is operationally often useful to search for all messages
of TYPE=log or with a certain SEVERITY. Such searches are relatively slow in
the original schema because they require nested lookups in the MESSAGE_CONTENT
table.
</para>
<para>The SNS version of CSS therefore added commonly used message properties
directly to the MESSAGE table. Some tools like the message viewer from
<code>org.csstudio.alarm.beast.msghist</code> automatically determine
which message properties are in the main MESSAGE table, and which are in the
MESSAGE_CONTENT table. Other tools like the ones used to write messages from
JMS to the RDB are site-specific, see <xref linkend="ch_org.cstudio.sns.jms2rdb"/>
</para>
</sect1>

<sect1>  <title>Viewing the Message History</title>
<para>CSS includes a generic message history browser as part of the
alarm system, see <xref linkend="ch_org.cstudio.alarm.beast.msghist"/>.
Once the messages are logged to the relational database, it is of course
possible to create various tools to create customized reports,
for example based on JSP technology for web reports.
</para>
</sect1>

</chapter>
