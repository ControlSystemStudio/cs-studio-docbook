<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="ch_products">
<title>Products</title>

<para>This chapter describes how and why Plug-ins get combined into a Product.
</para>

<para>As already explained in <xref linkend="sec_rcp"/>,
a product combines selected Plug-ins with configuration files
and an OS-specific launcher.
Why is there more than one CSS product?
Why can it be difficult to select the required Plug-ins?
</para>


<sect1> <title>Site-Specific Plugin Selection and Settings</title>
<para>Plug-in contain the Java code and associated content like online help
for some CSS functionality.
One example would be a <code>databrowser</code> Plug-in that implements
the Data Browser.
System integrators at different site might prefer some Plug-ins over others,
for example one operator interface tool over another.
</para>

<para>A product also contains the default settings, the
<filename>plugin_customization.ini</filename> file described
in <xref linkend="ch_preferences"/>.
To users of CSS it is most convenient when the suitable settings
for their site, for example EPICS Channel Access addresses, web links,
LDAP server hosts for authentication are already <quote>built in</quote>,
so that there is usually no need to adjust any preference settings
after installing CSS onto their office computer.
</para>

<para>To provide a site-specific selection of products with suitable
default settings, most sites will need a custom-built CSS product.</para>

<para>CSS instances can self-update from a repository.
Users will see a notice that updates are available, and CSS will
restart after installing them.
In an operational setup it is typically of advantage to control
which updates become available when and how, which means that each
site that uses CSS will need its own, local update server
from which its CSS instances pull updates that apply to their local CSS
product.
</para>
</sect1>


<sect1> <title>Plug-in Dependencies<indexterm><primary>Dependencies</primary></indexterm></title>
<para>
A plug-in can depend on other plug-ins.
For example, the <code>databrowser</code> plug-in depends on others
which provide access to archived data, to live data, and it also depends on
a plotting plugin.
When adding the <code>databrowser</code> plugin to a product, these dependencies
are mostly added automatically.
There are, however, additional dependencies that Eclipse cannot automatically determine.
</para>

<para>For example, the plug-in on which the Data Browser directly depends to read archived data
only defines the programming interface for reading historic data.
CSS is designed to support multiple sources of archived data,
for example the XML-RPC network data server of the Channel Archiver but also
an RDB-based archive. Some sites use the former, others the latter, some might use both
and other sites might use an entirely different archive data store.
Similar examples exist for access to an electronic log-book, or to reading live control system data.
</para>

<para>Eclipse cannot automatically decide which implementing plug-in are necessary at
a site, so it is up to the creator of a CSS product to select among the available
plug-ins that implement access to archived data, a log book or live data.
She might even need to implement a new, site-specific way of reading historic data
or writing to a log book.
</para>
</sect1>


<sect1> <title>Features<indexterm><primary>Features</primary></indexterm></title>
<para>As just described, we often need more than one plug-in to provide
a certain functionality, for example the <code>databrowser</code> plug-in
with its immediate dependencies combined with a site-specific selection of
log book, live and historic data implementations.
Directly listing all plug-ins in a product configuration would result in
a long list that is hard to maintain.
</para>

<para>A feature is simply a list of related plug-ins, for example all plug-ins
that a site uses for the Data Browser functionality.
Features can also be used to modularize the head-less built,
and features can appear as separate, optional components in an update repository,
allowing end users to install them into their CSS product on demand.
</para>
</sect1>


<sect1> <title>Creating a Product<indexterm><primary>Product, Creating</primary></indexterm></title>
<para>Fundamentally, an RCP Product is a plugin that implements the
<code>org.eclipse.core.runtime.applications</code> extension point,
and has a <filename>*.product</filename> file.
The application extension point represents the <quote>main</quote> routine
of the program, and the product file lists all plugins that you want to include
in your product.
</para>

<para>A CSS application should create a workbench window with certain menus
into which other CSS plugins can then add their entries. Similarly, it needs
to create a skeleton for the online help and preference system.
Existing CSS plugins can be used to provide these.
</para>

<sect2>  <title>New Product Plug-in</title>
<para>Create a new plugin. The suggested name is <code>org.csstudio.</code>
followed by your site name and ending in <code>.product</code>,
for example <code>org.csstudio.mysite.product</code>.
</para>
<para>Add these dependencies:
<variablelist>
  <varlistentry><term><code>org.eclipse.core.runtime</code></term>
  <listitem>Defines the application extension point.</listitem>
  </varlistentry>

  <varlistentry><term><code>org.csstudio.startup</code></term>
  <listitem>Provides CSS-compliant application code.</listitem>
  </varlistentry>
</variablelist>
</para>
</sect2>

<sect2>  <title>Implement Application</title>
<para>Extend the <code>org.eclipse.core.runtime.applications</code> extension point.
As an ID, you can simply enter <quote>application</quote> which will result
in a complete ID of <code>org.csstudio.mysite.product.application</code>.
Add a <quote>run</quote> element with value
<code>org.csstudio.startup.application.Application</code>,
i.e. use the skeleton implementation from the CSS startup plugin.
</para>
</sect2>

<sect2>  <title>Add Product Definition</title>
<para>Use the IDE wizard to create a new <quote>Plug-in Development</quote>,
<quote>Product Configuration</quote> in your product plugin.
When editing the generated <filename>.product</filename> file,
select the application ID defined in the previous step.
Press the <quote>New...</quote> button next to the <quote>Product Definition</quote>
section to create a new product ID, and in there again select your application ID.
</para>
<para>Next you need to select if your product configuration is based on plugins or features,
and then list either plugin or features in the <quote>Dependencies</quote> tab.
Initially it might appear easier to simply list plugins.
You can then list the application plugins that you want to include in your product,
for example Probe and BOY. You then press the <quote>Add Required Plug-ins</quote>
button, and you are done.
</para>
<para>This approach has the disadvantage that your product consists of a long
list of plugins. After the fact it will be hard to determine which plugins you wanted to include
in your product to provide the user with some functionality, and which plugins had
to be added because they were dependencies of those functional plugins.
</para>
<para>In the long run you might find it easier to maintain the product if it is based on features.
You define one feature to list the application plugins that you want for your users,
and separate features to list the plugins that result from dependencies,
maybe further separated into CSS core plugins and those from Eclipse.
The following describes how to create those features.
</para>
</sect2>

<sect2>  <title>Create <code>applications</code> Feature</title>
<para>Create a new <quote>Feature</quote> project called
<code>org.csstudio.mysite.applications.feature</code>.
This feature lists all the application plugins that you want to
include into your product, for example the plugins for Probe,
Data Browser, BOY.
</para>
<para>Start by adding your product plugin, then add the application
plugins. Some application plugins are already pre-aggregated into
features, for example
<code>org.csstudio.opibuilder.feature</code>.
You can add individual plugins or make your applications feature
include other features.
</para>
<para>Finally, add the applications plugin to your
<filename>*.product</filename> dependencies.
</para>
</sect2>

<sect2>  <title>Create <code>core</code> Feature</title>
<para>Similar to the <code>eclipse</code> feature, create a feature
called <code>org.csstudio.mysite.core.feature</code> and add it as
a dependency to your product.
This feature will list all <quote>core</quote> CSS plugins that your application
plugins need.
By separating these supporting plugins from the application plugins that
the end user sees, it will be easier to maintain your product in the long run.
</para>
<para>One core plugin that you will have to add is <code>org.csstudio.startup</code>,
and we will soon add more.
</para>
</sect2>

<sect2>  <title>Create <code>eclipse</code> Feature</title>
<para>Finally, create an <code>eclipse</code> feature.
This feature will list all Eclipse plugins, i.e. plugins that CSS uses but
which are provided by Eclipse.
It is unfortunately not very easy to determine which Eclipse plugins you
need to include in your product, and details will change between versions
of Eclipse.
For this reason it is useful to list them in their own feature.
</para>
<para>Start by adding <code>org.eclipse.core.runtime</code> to your
<code>eclipse</code>, that add it in turn to your
<filename>*.product</filename> dependencies.
We will later determine which other Eclipse plugins need to be listed
in your <code>eclipse</code>.
</para>
</sect2>


<sect2>  <title>Fix Dependencies</title>
<para>Finally, create an <code>eclipse</code> feature.
This feature will list all Eclipse plugins, i.e. plugins that CSS uses but
which are provided by Eclipse.
It is unfortunately not very easy to determine which Eclipse plugins you
need to include in your product, and details will change between versions
of Eclipse.
For this reason it is useful to list them in their own feature.
</para>
<para>Start by adding <code>org.eclipse.core.runtime</code> to your
<code>eclipse</code>, that add it in turn to your
<filename>*.product</filename> dependencies.
We will later determine which other Eclipse plugins need to be listed
in your <code>eclipse</code>.
</para>
</sect2>


</sect1>


</chapter>
