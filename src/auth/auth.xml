<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap_auth">
<title>Authentication and Authorization</title>

<sect1> <title>Overview</title>
<para>Access to some components of CSS is restricted.
Changes to the alarm system configuration for example are
only permitted to authorized users.
User interface elements like the context menu entries to configure
or remove some part of the alarm configuration are only accessible
after the user has logged in
<emphasis>and</emphasis> that user is indeed authorized to manipulate
the alarm configuration.
</para>

<figure xml:id="fig_auth_example">  <title>Authenticate to change alarm configuration</title>
  <mediaobject>
    <imageobject><imagedata fileref="auth_example.png" width="95%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>
<emphasis role="strong">Authentication</emphasis><indexterm><primary>Authentication</primary></indexterm>
is the act of confirming a user's identity,
typically by prompting for a <emphasis>user name</emphasis>
and <emphasis>password</emphasis>,
and trusting that the user is who he claims to be if the
password checks out OK.
</para>
<para>
<emphasis role="strong">Authorization</emphasis><indexterm><primary>Authorization</primary></indexterm>
is the process of determining if an <emphasis>authenticated</emphasis> user
is allowed to perform a certain operation, typically by consulting some
type of database that lists the permissions of all the known users.
</para>
<para>
CSS has a security API for authentication and authorization
(Auth &amp; Auth) defined by the plugins
<code>org.csstudio.auth</code> and
<code>org.csstudio.auth.ui</code>.
The following sections describe several implementing plugins.
</para>
<para>A certain understanding of these mechanisms is required
even if you want to start out by providing all users with
full access to all features,
because missing Auth &amp; Auth support can result in restricted access
for all users.
As a minimum, you might have to configure your CSS product to
use the <quote>dummy</quote> authentication and authorization.
</para>

<figure xml:id="fig_auth">  <title>CSS Extension Points for Auth &amp; Auth</title>
  <mediaobject>
    <imageobject><imagedata fileref="auth.png" width="55%" format="PNG"/></imageobject>
  </mediaobject>
</figure>
</sect1>


<sect1> <title>Authentication: org.csstudio.platform.loginModule</title>
<para>This CSS extension point allows plugins to provide
authentication.
CSS expects <emphasis>exactly one</emphasis> implementation.
If multiple implementations are found, the result is the same
as having none: Nobody can authenticate.
Authentication may be invoked when starting CSS as part of
a <quote>log in</quote> dialog.
It is later also available via the menu item
<code>File</code>, <code>Switch User</code>.
</para>

<sect2> <title>org.csstudio.platform.jaasAuthentication</title>
<para>This plugin implements authentication based on JAAS,
the Java Authentication and Authorization Service.
JAAS in turn is highly configurable to use for example LDAP.
The plugin contains a JAAS configuration file
<filename>conf/auth.conf</filename>.
The file contains the following examples to get you started,
but you might have to consult the JAAS documentation for details:
</para>
<itemizedlist>
<listitem>Dummy:
Accepts every user name and password except for the user name
<quote>fail</quote>.
Useful for testing or when you don't really want to support
authentication.
</listitem>
<listitem>Kerberos</listitem>
<listitem>LDAP for a few LDAP servers</listitem>
</itemizedlist>

<para>Since the <filename>auth.conf</filename> file can list
many possible configurations, the jaasAuthentication plugin
uses a preference setting to determine which configuration
to use. You should set this preference in the
<filename>plugin_customization.ini</filename> file of your
CSS product:
</para>
<programlisting>
# Select 'Dummy' JAAS Authentication
org.csstudio.platform.jaasAuthentication/jaas_config_source=File
org.csstudio.platform.jaasAuthentication/jaas_config_file_entry=Dummy
</programlisting>

<para>To add your authentication method, you could extend
the <filename>auth.conf</filename> file and then select your entry via the
<code>jaasconfig</code> preference.
</para>
<para>Alternatively, you can use the preference setting
<code>jaas_config_source=PreferencePage</code> 
and then provide what you would have added to
the file in a <code>jaas_prefs_config</code> preference variable.
For examples see <filename>preferences.ini</filename>
in the jaasAuthentication plugin.
</para>
</sect2>


<sect2> <title>org.csstudio.platform.jaasAuthentication.ui</title>
<para>This plugin allows setting of jaasconfig preferences
from the Eclipse preference GUI.
</para>
</sect2>


<sect2> <title>JAAS LDAP Authentication via JndiLoginModule</title>
<para>To use LDAP authentication with the standard JAAS
<code>JndiLoginModule</code>, your LDAP server must provide
user and password information in <code>posixAccount</code>
entries as they are also used for Linux accounts.
</para>
<programlisting># LDAP user/password example suitable for JAAS
# com.sun.security.auth.module.JndiLoginModule
dn: uid=fred,ou=People,dc=test,dc=ics
objectClass: inetOrgPerson
objectClass: organizationalPerson
objectClass: person
objectClass: posixAccount
objectClass: top
uid: fred
userPassword: {CRYPT}xxxxxxxxxx
cn: Fred Testuser
sn: Fred
homeDirectory: /home/fred
uidNumber: 42
gidNumber: 42
</programlisting>

<para>Fundamentally, the user name and password entered
by the user must match the <code>uid:</code> and
<code>userPassword:</code> in LDAP.
Note that the userPassword
<emphasis role="strong">must be in <code>{CRYPT}</code> format</emphasis> 
because the JAAS JndiLoginModule only handles
the <code>{CRYPT}</code> format and cannot read passwords
stored in a different format.
</para>
<para>The JndiLoginModule also requires
<code>uidNumber:</code> and <code>guiNumber:</code>
entries as part of the posixAccount object class,
even though CSS will not use that information.
For full details refer to the javadoc of the
JAAS JndiLoginModule.
</para>
</sect2>


<sect2> <title>JAAS LDAP Authentication via LDAPBindLoginModule</title>
<para>The standard JAAS <code>JndiLoginModule</code> requires
read access to the password information in LDAP.
If your LDAP server administrator does not allow this
for security concerns, you can select the custom JAAS
login module
<programlisting>org.csstudio.platform.internal.jaasauthentication.LDAPBindLoginModule
</programlisting>
</para>
<para>This module authenticates to LDAP by using a simple bind operation.
The entries on the LDAP server look as in the
<code>JndiLoginModule</code> JndiLoginModule case,
except that the only thing which really matters is the
<code>dn:</code> and <code>userPassword:</code> information.
The LDAPBindModule will try to bind to a DN,
and the LDAP server checks the password.
The login module will not attempt to read anything from LDAP,
so the remaining entries are irrelevant.
</para>
<para>Depending on your LDAP server, beware that it may only
handle the bind for passwords in a certain format.
Specifically, it may not allow a bind for entries with
<code>{crypt}</code> formatted passwords,
which clashes with the previous case.
</para>
</sect2>


<sect2> <title>JAAS Kerberos Authentication</title>
<para>The <filename>conf/auth.conf</filename> file in the
jaasAuthentication plugin contains an example for using the
JAAS Krb5LoginModule, which in turn uses Kerberos.
Additional environment variables may be needed,
refer to the JAAS documentation.
</para>
</sect2>
</sect1>


<sect1> <title>Authorization: org.csstudio.platform.authorizationProvider</title>
<para>This extension point allows plugins to provide authorization.
The data model is based on Users who have Rights,
and Actions that require Rights.
Rights are described via Roles and Groups:
</para>
<itemizedlist>
<listitem><code>User</code>:
 Name of an authenticated user, for example <quote>Fred</quote>.
</listitem>
<listitem><code>Action ID</code>:
 Identifier for a certain action, for example <quote>alarm_ack</quote>
 for the acknowledgement of alarms. Also called Authorization ID.
</listitem>
<listitem><code>Role</code>:
 A site-specific role that a user might have, for example
  <quote>ADMIN</quote>, <quote>OPERATOR</quote> or <quote>GUEST</quote>.
</listitem>
<listitem><code>Group</code>:
 A site-specific group like <quote>VACUUM</quote> or <quote>CRYO</quote>.
</listitem>
<listitem><code>Right</code>:
 The combination of role and group.
 User <quote>Fred</quote> might be an <quote>ADMIN</quote>
 in the <quote>CRYO</quote> group
 but only a <quote>GUEST</quote> in the <quote>VACUUM</quote> group. 
</listitem>
</itemizedlist>

<figure xml:id="fig_auth_rights">
  <title>CSS Authorization Data Model.
    Applications actually use the <code>SecurityFacade</code> API
    which internally calls the <code>RightsManagementService</code>.
  </title>
  <mediaobject>
    <imageobject><imagedata fileref="auth_rights.png" width="100%" format="PNG"/></imageobject>
  </mediaobject>
</figure>


<sect2> <title>org.csstudio.sns.dummyAuthorization</title>
<para>This plugin always authorizes everybody to do anything.
Note that it is still required to be <emphasis>authenticated</emphasis>,
because authorization is only checked for authenticated users.
Non-authenticated users have no rights.
</para>
</sect2>

<sect2> <title>org.csstudio.sns.ldapAuthorization</title>
<para>This plugin stores the Authorization info in LDAP.
The rights assigned to each user and the rights required to execute
a certain action are in two separate sections under a common base DN.
The following examples use a base DN of
<code>ou=CSSAuthorization,dc=test,dc=ics</code>.
</para>

<para>Before entering CSS authorization information,
you need to add the following schema definitions to your LDAP server:
</para>
<programlisting># css.schema
# Authorization related scheme elements
# Based on information from http://css.desy.de

objectclass ( 1.3.6.1.4.1.341.999.2 NAME 'cssRole'
  DESC 'Role for CSS authorization: cn is role, ou is group'
  SUP top STRUCTURAL
  MUST cn
  MAY ( memberUid $ description )  )

attributetype ( 1.3.6.1.4.1.341.999.1.3 NAME 'auid'
  DESC 'name of authorize ID'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

attributetype ( 1.3.6.1.4.1.341.999.1.2 NAME 'cssGroupRole'
  DESC 'group and role, it must be in a format of (group,role)'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

attributetype ( 1.3.6.1.4.1.341.999.1.1 NAME 'cssActionPath'
  DESC 'the full path for an action or control in css'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256}  )

objectclass ( 1.3.6.1.4.1.341.999.1 NAME 'cssAuthorizeID'
  DESC 'an authorized ID'
  SUP top STRUCTURAL
  MUST auid
  MAY ( cssGroupRole $ cssActionPath $ description ) )
</programlisting>

<para>With OpenLDAP you would add the following to slapd.conf:</para>
<programlisting>include  /etc/openldap/schema/css.schema
</programlisting>

<para>With OpenLDAP it might also be useful to control access to the authorization
info with an entry similar to this in <filename>slapd.conf</filename>:
</para>
<programlisting># Define which users can write to CSS Authorization
Access to dn.subtree="ou=CSSAuthorization,dc=test,dc=ics"
  by dn.exact="uid=alarm_config_user1,ou=Users,dc=test,dc=ics" write
  by dn.exact="uid=alarm_config_user2,ou=Users,dc=test,dc=ics" write
  by * read
</programlisting>

<sect3> <title>Rights assigned to a user</title>
<para>The <code>CSSGroupRole</code> sub-tree lists all available rights
and assigns users to them in entries based on the <code>cssRole</code> schema.
</para>
<para>Example:
</para>
<programlisting>dn: cn=developer,ou=alarm,ou=CSSGroupRole,ou=CSSAuthorization,
   dc=test,dc=ics
objectClass: cssRole
cn: developer
memberUid: Fred
memberUid: Jane

dn: cn=operator,ou=alarm,ou=CSSGroupRole,ou=CSSAuthorization,
   dc=test,dc=ics
objectClass: cssRole
cn: operator
memberUid: operator
</programlisting>

<para>This example defines the following user rights:
<itemizedlist>
<listitem>Right <quote>developer</quote>/<quote>alarm</quote>:
Users authenticated as <quote>Fred</quote> or <quote>Jane</quote>
have the <quote>developer</quote> role in the <quote>alarm</quote> group.
</listitem>
<listitem>Right <quote>operator</quote>/<quote>alarm</quote>:
Users authenticated as <quote>operator</quote> have the <quote>operator</quote>
role in the <quote>alarm</quote> group.
</listitem>
</itemizedlist>
</para>
</sect3>



<sect3> <title>Rights required by an Action</title>
<para>The CSSAuthorizeID sub-tree lists the Rights required by
restricted actions with entries based on the cssAuthorizeID schema.
</para>
<para>Example:</para>
<programlisting>dn: auid=alarm_ack,ou=AlarmSystem,ou=CSSAuthorizeID,
   ou=CSSAuthorization,dc=test,dc=ics
objectClass: cssAuthorizeID
auid: alarm_ack
cssGroupRole: (alarm, developer)
cssGroupRole: (alarm, operator)

dn: auid=alarm_config,ou=AlarmSystem,ou=CSSAuthorizeID,
   ou=CSSAuthorization,dc=test,dc=ics
objectClass: cssAuthorizeID
auid: alarm_config
cssGroupRole: (alarm, administrator)
cssGroupRole: (alarm, developer)
</programlisting>

<para>This example defines the following Action IDs:
<itemizedlist>
<listitem>alarm_ack:
The CSS alarm system uses this action ID for alarm acknowledgement.
Users who want to acknowledge alarms need either alarm/developer
or alarm/operator rights.
</listitem>
<listitem>alarm_config:
The CSS alarm system uses this ID for alarm configuration actions.
Users who want to change the alarm system configuration need the
alarm/developer right.
</listitem>
</itemizedlist>
</para>

<para>Note how the example entries were listed under
ou=AlarmSystem, one level below the CSSAuthorizeID sub-tree.
This is purely for administrator convenience to allow grouping
of related authorization requirements,
for example to put all alarm system related Action IDs into a sub-tree.
The authorization code will search all sub-trees of CSSAuthorizeID
for entries in the cssAuthorizeID objectClass.
</para>

<para>By combining the authorization configuration listed above,
you get the following:
<itemizedlist>
<listitem>A user authenticated as <quote>operator</quote>,
which is likely a shared account, can acknowledge alarms.
</listitem>
<listitem>Individuals authenticated as <quote>Fred</quote> or <quote>Jane</quote>
can acknowledge and configure alarms.
</listitem>
</itemizedlist>
</para>
</sect3>

</sect2>

<sect2> <title>org.csstudio.platform.ldapAuthorization</title>
<para>Also based on LDAP, but with a different LDAP schema.</para>
</sect2>

</sect1>

</chapter>
