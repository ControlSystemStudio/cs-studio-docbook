<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
         xml:id="ch_data">
<title>Access to Data</title>

<para>CSS code uses <quote>plug-able</quote> libraries for accessing data.
</para>

<sect1>  <title>Live Data</title>

<para>There are at this time three libraries for accessing live data:
<orderedlist>
<listitem>DAL: This library was developed to support all data types, narrow PV-type access as well as wide object-type access, for EPICS as well as other control system network protocols. It is used by SDS.
</listitem>
<listitem>utility.pv: This smaller library was developed to support PV-type access for the data types needed by generic control system tools. It is used by the EPICS PV Tree, PV Table, Data Browser, BOY, (BEAUTY) Archive Engine, (BEAST) Alarm Server.
</listitem>
<listitem>pvmanager: This new API supports PV-type access but also handles aggregation and threading.
</listitem>
</orderedlist>
All libraries are fundamentally plug-able as described in the following
where utility.pv is used as an example.
</para>

<para>The plugin <code>org.csstudio.utility.pv</code> defines an interface
for accessing live control system data.
The archive engine for example uses that library for subscribing to value updates
from PVs that you want to archive.
The utility.pv plugin does not, however, contain any implementation. Instead,
it defines an Eclipse Extension Point that allows other plugins to provide
pluggable implementations. The plugin <code>org.csstudio.utility.pv.epics</code>
implements live data access based on EPICS Channel Access Version 3.
The plugin <code>org.csstudio.utility.pv.simu</code> implements simulated
PVs like <code>sim://ramp</code>.
This way, one can build an archive engine that supports EPICS, or EPICS and simulated PVs,
or only simulated PVs by simply including the desired plugins. There is no need to
change the actual archive engine code at all.
</para>

<para>While this modular approach is very flexible, there can be one disadvantage:
The archive engine code for example only depends on <code>org.csstudio.utility.pv</code>,
the definition of the API for accessing live data. When bundling the archive engine code
into a product, this plugin must be included. The implementing plugins like
<code>org.csstudio.utility.pv.epics</code> are optional, allowing you to build
an archive engine that does not interface to EPICS but another network protocol
of your choice. If you fail to include <emphasis>any</emphasis> implementing plugins,
the product will built without errors but later issue runtime error messages
<programlisting>No extensions to org.csstudio.utility.pv.pvfactory found</programlisting>

This error means: The <code>org.csstudio.utility.pv</code> could not locate any
implementation, no <quote>factory</quote> classes for creating actual live data PVs.
You need to include at least one implementing plugin like <code>org.csstudio.utility.pv.epics</code>
or <code>org.csstudio.utility.pv.simu</code>.
</para>

</sect1>

</chapter>
