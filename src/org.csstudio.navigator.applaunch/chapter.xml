<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="ch_applaunch">

<!-- NOTE:

     This file is used both for the docbook
     and to generate the online help for the
     org.csstudio.navigator.applaunch plugin!

 -->
<title>Application Launcher - org.csstudio.navigator.applaunch<indexterm><primary><code>org.csstudio.navigator.applaunch</code></primary></indexterm></title>

<para>This plugin supports Application Launch configuration files
which can then be started from the Eclipse Navigator.
</para>

<figure xml:id="fig_applaunch">  <title>Application Launch files</title>
  <mediaobject>
    <imageobject><imagedata fileref="applaunch.png" width="40%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>Most accelerator sites have some type of application launcher
that lists the many specialized tools that operators or
experimenters can start.
Users of several subsystem groups can create their own section
of the launch configuration.
Some tools are listed more than once as shown for the Terminal
tool in <xref linkend="fig_applaunch"/> because several groups
would like to list it in <quote>their</quote> section of the launcher.
</para>

<para>This plugin allows using the Eclipse Navigator view as such a launcher.
The navigator already displays all workspace files, and can for example
open the operator display editor or runtime for display files.
It is thus a basic launcher where users can arrange the files
in projects and sub-directories and then launch the associated CSS tools.
Using linked folders, one can create shared as well as user-specific
arrangements.
</para>

<para>The use of the Navigator as a launcher complements the CSS menu bar:
The menu bar has a comparable limited size and fixed arrangement.
It lists the tools built into CSS that many users need.
Each CSS tool typically shows only once in the menu bar.
</para>
<para>A launcher configuration can be much bigger, listing many external
tools. Some entries like the launcher for a terminal window can appear
in multiple sub-directories of the launch configuration because
each subsystem group of users can create their own section of the launch
configuration.
</para>

<sect1> <title>Basic Usage</title>
<para>End users simply double-click a launch configuration
file in the Navigator.
Similar to the way double-clicking a display file opens
the operator interface tool, opening a launch configuration file
will start the associated external application.
</para>
<para>Eclipse remembers the last action on a file.
If the user had previously edited a launch configuration,
i.e. opened it in an editor instead of executing it,
Eclipse will remember this and again open the editor
on the next double-click.
In this case once right-click the launch configuration file
and select <code>Open With</code>, then <code>Launch Application</code>
to execute it. From now on the double-click will also default to
launching the application.
</para>
<para>Users can create new subsections of the launcher by creating
new file folders in the Navigator:
</para>
<itemizedlist>
<listitem>Right-click on the parent folder</listitem>
<listitem>Select <code>New</code>, <code>Other..</code>,
section <code>General</code>, type <code>Folder</code></listitem>
<listitem>Enter name of new folder</listitem>
</itemizedlist>
<para>Since launch configuration files are still files,
they can be moved, copied, renamed like any other file
in the Navigator.
</para>
</sect1>


<sect1> <title>Creating a new Application Launcher Configuration File</title>
<itemizedlist>
<listitem>Right-click on the parent folder</listitem>
<listitem>Select <code>New</code>, <code>Other..</code>,
section <code>Launcher</code>,
<code>Application Launch Configuration</code>
</listitem>
<listitem>Enter a file name, for example <code>Terminal</code>.
The file extension <filename>.app</filename> will be added automatically,
so the resulting launch configuration file
would be <filename>Terminal.app</filename>
</listitem>
<listitem>On the next page of the Launch Configuration editor,
enter the command to launch, for example <code>xterm</code>
or <code>cmd.exe</code>.
You may also select an icon.
</listitem>
<listitem>Press <code>Finish</code>.
</listitem>
<listitem>Execute the launch configuration via
right-click on the file,
selecting <code>Open With</code>, then <code>Application Launcher</code>.
From now on the double-click will also default to launching the application.
</listitem>
</itemizedlist>
</sect1>

<sect1> <title>Examples for commands to launch</title>
<para>
The command to launch can be anything that is also executable
from a shell or command prompt.
One example is starting a shell window for entering such commands.
</para>
<para>On Windows, this could be <code>cmd.exe</code> which is in the <code>%PATH%</code>.
</para>
<para>On Linux, it could be <code>xterm</code> if on the <code>$PATH</code>,
or better <code>/usr/bin/X11/xterm</code> or a similar complete path.
</para>
<para>On Mac OS X, one could use <code>/Applications/Utilities/Terminal.app</code>.
Beware: Both the Launch configuration file names and the Mac OS application directories
use an extension <code>*.app</code>. In your CSS workspace you can create a file
<code>Terminal.app</code> that contains the launch configuration for the Mac OS X
terminal window application <code>/Applications/Utilities/Terminal.app</code>.
Running that launcher in CSS will then start the Mac OS X terminal application.
</para>
<para>If you want to launch a program that requires additional command-line
arguments, you can create a batch file or shell script to invoke
the program as desired and then use that batch file or shell script
as the launcher command.
</para>
<para>On Windows or Mac OS X the command can also be the path to
a file where the operating system knows how to handle that file.
For example, if double-clicking on a <filename>*.doc</filename>
file will open MS Word on your computer, you can use the full path
to such <filename>*.doc</filename> files as launcher commands.
When activating such a command, the operating system will open
MS Word with the document.
</para>
</sect1>

<sect1> <title>Editing an Application Launcher Configuration File</title>
<para>To edit an existing launcher configuration file:
</para>
<itemizedlist>
<listitem>Right-click on the <filename>*.app</filename> file that
you want to edit</listitem>
<listitem>Select <code>Open With</code>, then <code>Application Editor</code>.
</listitem>
</itemizedlist>

<figure xml:id="fig_applaunch_config">  <title>Configuration Editor</title>
  <mediaobject>
    <imageobject><imagedata fileref="config.png" width="50%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>The launcher configuration editor,
see <xref linkend="fig_applaunch_config"/>,
allows you to modify the command to execute
and to select a different icon.
</para>

</sect1>




<sect1> <title>Application Launcher Configuration File Details</title>
<para>If you create launcher configuration files by other means,
you need to be familiar with its XML file format.
</para>
<para>The application launcher configuration file name must end in
<filename>.app</filename>.
It must be a valid XML file with an <code>application</code>
root element and a <code>command</code>:
</para>
<programlisting><![CDATA[<application>
  <command>/path/to/the/command</command>
</application>]]>
</programlisting>

<para>The command should be the path to a command.
On MS Windows and Mac OS X, the command may also the path
to a file that the operating system can open.
For example, it could be the path to a Microsoft Word document
and invoking the command would then open that file in Microsoft Word
on a PC or Mac that has MS Word available.
</para>

<para>The launcher configuration file may include an optional <code>icon</code>:
</para>

<programlisting><![CDATA[<application>
  <command>/path/to/the/command</command>
  <icon>icon_info</icon>
</application>]]>
</programlisting>

<para>The icon info can be the following:
<itemizedlist>
<listitem>
<code>icon:clipboard</code>,
<code>icon:console</code>,
<code>icon:edit</code>,
<code>icon:run</code>,
<code>icon:text</code>, or
<code>icon:work</code>
to select built-in icons.
The default is <code>icon:run</code>.
</listitem>
<listitem>A path to an icon file within the workspace.
In an operational setup one might prepare a shared icon folder like
<filename>CSS/Share/icons</filename>, and then use an icon path
like
<filename>CSS/Share/icons/some_icon.gif</filename>
as a launcher icon.
</listitem>
</itemizedlist>
</para>
</sect1>

</chapter>
