<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"  version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap_compiling">
<title>Compiling, Running, Debugging CSS</title>

<para>End users of CSS should not have to compile CSS.
In the control room, they should already find it installed.
For office use, a version of CSS that is already configured
for the local site can be available on a local web site.
CSS can self-update from that same web site
via the Eclipse update mechanism.
</para>

<para>To reach that stage, somebody at each institute that uses CSS
obviously needs to prepare such a local down-load site,
compile CSS with suitable settings and place the binaries on the web site.
Note that in addition to the CSS application that end users will see,
a complete installation will also require you to compile the Archive Engine, Alarm Server,
tools to configure the archive and alarm system, maybe more.
</para>

<para>There are different ways of compiling CSS sources into executable binaries:
<itemizedlist>
<listitem>Tycho/Maven Build<indexterm><primary>Compile with Tycho/Maven</primary></indexterm>:
This allows you to create products from the command-line.
It can be automated.
For example, Hudson/Jenkins can create product binaries each night,
or whenever  the source code has changed in the software repository .
</listitem>
<listitem>Eclipse IDE<indexterm><primary>Compile in Eclipse IDE</primary></indexterm>:
You import the required CSS source code into the Eclipse
Integrated Development Environment (IDE)<indexterm><primary>Integrated Development Environment (IDE)</primary></indexterm>,
where you can interactively run, debug and export binary products.
</listitem>
<listitem>Headless PDE Build<indexterm><primary>Compile with Headless PDE</primary></indexterm>:
Similar to the Tyco/Maven Build, but using older tools, and no longer actively supported.
</listitem>
</itemizedlist>

We start by describing the Tycho/Maven Build based on a complete set of CSS source code.
Later, we describe how the Eclipse IDE can be used to study the source code, execute it within the IDE,
debug it, extend it.
</para>


<sect1 xml:id="sec_tycho_build">  <title>Tycho/Maven Build</title>

<para><code>Maven</code><indexterm><primary>Maven</primary></indexterm>
is a generic build tool for Java.
It uses <code>pom.xml</code><indexterm><primary>POM Files, pom.xml</primary></indexterm> files
to define how a piece of software needs to be compiled, and to list its dependencies.
Eclipse plugin sources already include 
<code>META-INF/MANIFEST.MF</code><indexterm><primary>Manifest files, META-INF/MANIFEST.MF</primary></indexterm>
files for almost the same purpose.
<code>Tycho</code><indexterm><primary>Tycho</primary></indexterm>, a support module for Maven,
allows Maven to re-use the existing Manifest files to compile Eclipse source code.
</para>

<para>From now on, we will refer to the Tycho/Maven Build as simply the Maven Build.
To build CSS from sources with Maven, you need
</para>

<itemizedlist>
<listitem><code>git</code>:
    Git it used to obtain a copy of the CSS sources from the software repository.
    See <link xlink:href="http://git-scm.com">http://git-scm.com</link>.
    As a developer, you would also use git to submit code updates.
</listitem>
<listitem><code>java</code>:
    A Java Development Kit (JDK)<indexterm><primary>Java Development Kit, JDK</primary></indexterm>
    is necessary to compile the sources.
    It should be the JDK, not just a Java Runtime Environment (JRE).
    It should be the Sun/Oracle JDK.
    OpenJDK, the GNU Compiler for the Java (GCJ)
    and other environments are currently not fully compatible
    with the Sun/Oracle JDK.
    Google for <quote>Oracle JDK</quote>.
</listitem>
<listitem><code>mvn</code>:
    Maven.
    See <link xlink:href="http://maven.apache.org">http://maven.apache.org</link>.
</listitem>
</itemizedlist>

<para>Add the desired version of Java to the <code>JAVA_HOME</code>
environment variable as well as the <code>PATH</code>:
</para>
<programlisting>export JAVA_HOME=/path/to/the/jdk
export PATH=$JAVA_HOME/bin:$PATH
</programlisting>

</sect1>


<sect1 xml:id="sec_get_sources"> <title>Obtaining CSS Sources</title>

<para>The complete CSS sources are in a shared
GitHub<indexterm><primary>GitHub</primary></indexterm><indexterm><primary>Source Code</primary></indexterm>
repository using the GIT version control system.
The project web site is
<link xlink:href="https://github.com/ControlSystemStudio">https://github.com/ControlSystemStudio</link>.
</para>

<para>
Example for fetching a complete copy of the source code:
</para>

<programlisting># Define base URL
GH=https://github.com/ControlSystemStudio

# 1) Maven bundles
# Code from existing Maven repositories,
# used "as is", wrapped into Eclipse bundles
git clone $GH/maven-osgi-bundles.git

# 2) Third party
# Sources provided by others
# which needed minimal additions/modifications
git clone $GH/cs-studio-thirdparty.git

# 3) Bulk of CSS sources
git clone $GH/cs-studio.git

# Depending on your site, you would only fetch one of the following
# examples, or use one that you created for your own purposes

# 4.1) 'common' product
# Eventually, the goal is for most sites to use this
git clone $GH/org.csstudio.product.git

# 4.2) SNS products
git clone $GH/org.csstudio.sns.git

# 4.3) NSLS2 product
git clone $GH/org.csstudio.nsls2.product.git

# 4.4) Your product?
git clone you_would_need_to_know_what_to_get
</programlisting>

<para>To work on the CSS source code, i.e. to be able to submit changes, several steps are necessary:</para>
<orderedlist>
<listitem>Obtain GitHub account.</listitem>
<listitem>Become familiar with GIT,
          learn how to clone the repository, how to submit pull requests.
</listitem>
<listitem>Contact one of the CSS developers to gain direct write access to the repository.</listitem>
</orderedlist>

</sect1>



<sect1> <title>Composite P2 Repository</title>

<para>When you compiling the sources just fetched from git,
building each module results in a P2 repository for the created artifacts.
Compilation of a module typically depends on other previously created modules.
When finally building the products, this will require access to all
the previously created module repositories.
</para>

<para>A composite P2 repository can lists all the locally created artifacts.
This is best when you need to work on the software.
To simply assemble a product, you could also use a composite P2 repository
that lists web sites which already contain the binary artifacts,
without first compiling them locally from source code.
</para>

<para>To create a composite repository,
create a directory <code>my_comp_repo</code> in the same directory
that also contains the previously cloned source modules
with the following two files:
</para>

<programlisting>&lt;!-- File my_comp_repo/compositeContent.xml -->
&lt;?xml version='1.0' encoding='UTF-8'?>
&lt;?compositeMetadataRepository version='1.0.0'?>
&lt;repository name='Local Composite Repository'
type='org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository'
            version='1.0.0'>
  &lt;properties size='1'>
    &lt;property name='p2.atomic.composite.loading' value='false'/>
  &lt;/properties>
  &lt;children size="4">
    &lt;child location="../maven-osgi-bundles/repository/target/repository"/>
    &lt;child location="../cs-studio-thirdparty/repository/target/repository"/>
    &lt;child location="../cs-studio/core/p2repo"/>
    &lt;child location="../cs-studio/applications/p2repo"/>
  &lt;/children>
&lt;/repository>
</programlisting>


<programlisting>&lt;!-- File my_comp_repo/compositeArtifacts.xml -->
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;?compositeArtifactRepository version='1.0.0'?>
&lt;repository name="Local Composite Repository"
type="org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository"
            version="1.0.0">
  &lt;properties size="0">
  &lt;/properties>
  &lt;children size="4">
    &lt;child location="../maven-osgi-bundles/repository/target/repository"/>
    &lt;child location="../cs-studio-thirdparty/repository/target/repository"/>
    &lt;child location="../cs-studio/core/p2repo"/>
    &lt;child location="../cs-studio/applications/p2repo"/>
  &lt;/children>
&lt;/repository>
</programlisting>

<para>The <code>p2.atomic.composite.loading</code> controls how missing child locations
are treated.
Setting it to <code>true</code> will check if all listed child locations contain valid repositories.
This can be used to test the correctnes of the composite repository settings.
On the other hand, when we start out fresh and compile the <code>cs-studio/core</code> module,
the <code>cs-studio/applications/p2repo</code> will not exist, yet, because it is generated
in a later step, so we need to set <code>p2.atomic.composite.loading</code> to <code>false</code>.
</para>

</sect1>


<sect1> <title>Local P2 Repository</title>

<para>When compiling the sources, you can configure Maven to collect
all created artifacts in one larger local P2 repository.
The previously described composite repository already lists all the artifacts
in their child sub-repositories, and in principle it should not be neccessary
to copy them all into another local P2 repository.
</para>

<para>The copy process, however, does not only copy the basic artifacts but
also their dependencies.
While the previously described composite repository is sufficient to build
all of CS-Studio via the Maven command line, you need to build a local repository
to work on the products within the Eclipse IDE.
</para>

</sect1>


<sect1> <title>Configuring and Invoking Maven</title>

<para>When obtaining the Maven Build tools and CSS sources,
you may have noted that we fetched neither Tycho nor Eclipse.
The beauty of Maven is that it will download all dependencies,
including Tycho and Eclipse, and work like a charm as long as it feels like doing so.
The horror of Maven is that it always appears to download the internet.
When the commands listed in the following instructions
are run for the first time, Maven will initially download Tycho.
It will place Tycho in a local Maven repository,
typically under <code>~/.m2/repository</code>.
Subsequent calls will not require a complete download, but Maven will continue to check
remote sites for updates, even when invoking a simple <code>mvn clean</code> command.
</para>
<para>
<emphasis role="strong">Note:</emphasis>
Maven is usually executed as <code>mvn install</code>.
This will compile the source code and place the results in the local
Maven repository. For compiling CSS, <emphasis>this is not recommended</emphasis>.
Do not invoke the Maven <code>install</code> command, because this will
result in version conflicts between artifacts that Maven then installs in its local
repository and the current sources of CSS.
Instead, the following recipe uses <code>mvn verify</code> and settings
that place the generated CSS binaries in a separate Maven repository
which can easily be deleted and re-created.
</para>
<para>Maven settings can be placed either in a global file
<code>$M2_HOME/conf/settings.xml</code>,
or in a user-specific file <code>$HOME/.m2/settings.xml</code>.
You could also specify the properties listed in this file on the command line,
invoking Maven as <code>mvn -Dcsstudio.local.repo=/... -DbaselineMode=warn</code>,
but to assert that the same settings will also be effective when you later
use Maven from within the Eclipse IDE, they are best placed in a <code>/.m2/settings.xml</code> file
with the following content:
</para>

<programlisting>&lt;!-- Maven settings.xml -->
&lt;settings>
  &lt;profiles>
    &lt;profile>
      &lt;id>my-css-settings&lt;/id>
      &lt;properties>
        &lt;!-- Configure either a composite repo -->
             or a local repository, not both!
          -->

        &lt;!-- Path to your composite repo -->
        &lt;csstudio.composite.repo>/path/to/my_comp_repo&lt;/csstudio.composite.repo>

        &lt;!-- Path to your local repo -->
        &lt;csstudio.local.repo>/path/to/my_local_repo&lt;/csstudio.local.repo>
        
        &lt;!-- Setting this property DISABLES
             downloads from
             download.controlsystemstudio.org,
             so you use only your
             local or composite repo
         -->
        &lt;cs-studio>dummy_value&lt;/cs-studio>
        
        &lt;!-- Issue warnings instead of aborting on error -->
        &lt;baselineMode>warn&lt;/baselineMode>
        &lt;jgit.dirtyWorkingTree>warning&lt;/jgit.dirtyWorkingTree>
        
        &lt;!-- Skip unit tests -->
        &lt;maven.test.skip>true&lt;/maven.test.skip>
        &lt;skipTests>true&lt;/skipTests>
        
      &lt;/properties>
    &lt;/profile>
  &lt;/profiles>

  &lt;!-- Enable the above settings -->
  &lt;activeProfiles>
    &lt;activeProfile>my-css-settings&lt;/activeProfile>
  &lt;/activeProfiles>
&lt;/settings>
</programlisting>

<para>To verify that your Maven setup uses the properties as you define
them in your settings file, you can use these commands
in any of the CSS source tree locations that contain a Maven <code>pom.xml</code>:
</para>
<programlisting># Should list "my-css-settings"
(cd maven-osgi-bundles; mvn help:active-profiles)

# In the long output, locate the &lt;properties> and
# verify they include what you entered in settings.xml 
(cd maven-osgi-bundles; mvn help:effective-pom)
</programlisting>

<para>Also verify that Maven is using the desired version of Java.
Note that the first Java found on your <code>$PATH</code> may not be what Maven uses
because it checks <code>$JAVA_HOME</code>.
Verify by checking the output of
</para>

<programlisting>mvn -version
</programlisting>

<para>Finally, to build CSS from sources, run Maven like this:
</para>

<programlisting># To start fresh, clean your local repository
# If you have accidentally invoked
#   mvn install
# or want to assert that you start over fresh:
rm -rf $HOME/.m2/repository

# Fetch external artifacts, wrap as Eclipse plugins
(cd maven-osgi-bundles; mvn clean verify)

# Compile third-party code that needed slight modifications
(cd cs-studio-thirdparty; mvn clean verify)

# Compile CSS 'core' code
(cd cs-studio/core; mvn clean verify)

# Compile CSS 'applications' code
(cd cs-studio/applications; mvn clean verify)

# Compile desired products
(cd org.csstudio.product; mvn clean verify)
# or:
(cd org.csstudio.sns; mvn clean verify)
# or:
(cd org.csstudio.nsls2.product; mvn clean verify)
</programlisting>

<para>After the last step, the created products can be found in
the following locations, depending on which products you built:
<programlisting>org.csstudio.product/repository/target/products
cs-studio-SNS/repository/target/products
org.csstudio.nsls2.product/repository/target/products
</programlisting>

There may also be a P2 udpate repository from which the generated product
can install optional features, for example
<programlisting>cs-studio-SNS/repository/target/repository
</programlisting>

</para>

</sect1>




<sect1 xml:id="sec_runnning_in_ide">  <title>Using the Eclipse IDE</title>

<para>Fundamentally, using the Eclipse IDE for CSS development is easy:
</para>
<orderedlist>
<listitem>Get Java and Eclipse</listitem>
<listitem>Get the CSS source code</listitem>
<listitem>Start Eclipse, import the sources</listitem>
<listitem>Open the <filename>*.product</filename> file for CSS, ArchiveEngine, ... and launch it.</listitem>
</orderedlist>

<para>In addition, the IDE allows you to run the products in debug mode,
setting breakpoints, examining the source code.
</para>
<para>Once the product is acceptable for use at your site, you can export
it from the IDE and install the result on the desired computers.
</para>

<para>At the time of this writing, CSS just started to use a Maven Build.
The Eclipse 4.4 (Luna) IDE includes Maven support, but you need to add Tycho tooling.
The tooling sometimes results in errors that are hard to reproduce or understand.
While the IDE includes very good GIT support, it is currently suggested to perform
the initial <code>git clone</code> on the command line,
and maybe even perform the Maven Build on the command line as described above
to assert that all is in order with your JDK, Maven, and the current set of CSS sources,
before starting to use the IDE to inspect and possibly change the source code.
</para>

</sect1>

<sect1>  <title>Prerequisites</title>

<para>You need
<itemizedlist>
<listitem>Java Development Kit (JDK) as described in <xref linkend="sec_tycho_build"/>.
</listitem>
<listitem><quote>Eclipse IDE for RCP and RAP Developers</quote>.
    See <link xlink:href="https://www.eclipse.org/downloads">https://www.eclipse.org/downloads</link>.
</listitem>
<listitem>Source code from GIT repository as already described in <xref linkend="sec_get_sources"/>.
</listitem>
</itemizedlist>
</para>

<para>Both the JDK and the RCP IDE need to be a specific version, ask other CSS developers
for the currently supported versions. 
</para>

<para>Start the Eclipse IDE, and assert that it uses the JDK:
<itemizedlist>
<listitem>Open the <code>Preferences</code> menu item.
It is usually in the <code>Windows</code> menu,
except for Mac OS X which offers it in the <code>Eclipse</code> menu.
</listitem>
<listitem>Locate entry <code>Java</code>, <code>Installed JREs</code>.</listitem>
<listitem>Assert that your JDK is listed and selected, otherwise use <code>Add</code> to add it, then select it as the default.</listitem>
</itemizedlist>
</para>

<para>Add Tycho support.
<itemizedlist>
<listitem>Open the <code>Preferences</code> menu item.</listitem>
<listitem>Locate entry <code>Maven</code>, <code>Discovery</code>.</listitem>
<listitem>Press <code>Open Catalog</code>, enter <code>tycho</code>, select the <code>Tycho Configurator</code>.</listitem>
<listitem>Press <code>Finish</code> and restart Eclipse when prompted.</listitem>
<listitem>After the restart, you should find the <code>Tycho Configurator</code> listed under the menu
          <code>Help</code>, <code>Installation Details</code>, <code>Installed Software</code>.
</listitem>
</itemizedlist>
</para>

<para>Configure Maven.
Eclipse includes a simplified version of Maven.
For consistent results, configure it to use the same <code>mvn</code>
that you call on the command line.
<itemizedlist>
<listitem>Open the <code>Preferences</code> menu item.</listitem>
<listitem>Locate entry <code>Maven</code>, <code>Installations</code>.</listitem>
<listitem>Press <code>Add</code> to add your command-line version of <code>mvn</code>.</listitem>
</itemizedlist>

Ignore warnings from unit tests:
<itemizedlist>
<listitem>Open the <code>Preferences</code> menu item.</listitem>
<listitem>Locate entry <code>Maven</code>, <code>Error/Warnings</code>.</listitem>
<listitem>Select <code>Ignore</code> for <code>Plugin execution not covered by lifecycle configuration</code>.</listitem>
</itemizedlist>

</para>

</sect1>


<sect1>  <title>Target Platform<indexterm><primary>Target Platform</primary></indexterm></title>

<para>CSS uses Eclipse and some publicly available external resources like <code>javax.mail</code>.
Even if you imported <quote>all</quote> CSS source code into the Eclipse IDE,
you still need those external resources.
The Maven Build obtains external resources from online repositories listed in the <code>pom.xml</code> files.
While the Eclipse IDE reads the <code>pom.xml</code> files to some extend,
it will not fetch external resources.
</para>

<para>An Eclipse <code>Target Platform</code> lists a set of plugins that the IDE
should use when compiling source code.
By default, the target platform of the IDE includes only the IDE itself.
For CSS development, you need a target platform that includes the following:
</para>

<itemizedlist>
<listitem>Correct version of the IDE.
          At times, CSS source code might be locked to a specific version of Eclipse.
          Your IDE may be the <quote>latest</quote>, newer than the version required for CSS sources,
          because your target platform provides the Eclipse plugins required
          to compile CSS.
</listitem>
<listitem>External dependencies. While the Maven build fetches these based on 
          information in the <code>pom.xml</code> files, the IDE requires them
          to be included in the target platform.
</listitem>
<listitem>Binaries for the CSS source code.
          This is optional, but if your target platform contains all the CSS binaries,
          you no longer need to import the complete CSS source code into the IDE.
          Instead, you can import only the sources which you want to study or extend.
          The IDE will favor source code that you have imported over the corresponding
          binaries in the target platform, so you can continue to import more source
          code as required. 
</listitem>
</itemizedlist>

<para>Depending on your needs, use one of the following target platforms.
</para>


<sect2> <title>Local Target: Current IDE and Result of Maven Build</title>
<para>If your IDE matches the version that is currently required to compile CSS,
and you completed the Maven Build from the command line as described earlier in this chapter,
you can use that as your target platform.
</para>

<itemizedlist>
<listitem>Open the menu <code>Preferences</code>, <code>Plug-in Development</code>, <code>Target Platform</code>.</listitem>
<listitem>Select <code>New</code>, then the option to base the new target on the <code>Current Target: Copy settings from the current target platform</code>.</listitem>
<listitem>Enter a name, for example <quote>IDE and Local</quote>.</listitem>
<listitem><code>Add</code> a <code>Directory</code>,
browsing to the path that you set for your local <code>/path/to/my_local_repo</code> in the Maven <code>settings.xml</code>.
</listitem>
<listitem>Press <code>Finish</code>, and assert that your new target platform is selected as the active one.</listitem>
</itemizedlist>

<para>As a result, your target platform should contain two entries: <code>${eclipse_home}</code> and for example <code>/my_local_repo</code>.
</para>

<para>This option has the advantage that your IDE target platform contains
only locally available plugins. Any external dependencies have been fetched
by the inital Maven Build from the command line.
This results in a robust target platform that you can use without requiring
network access.
</para>
</sect2>


<sect2> <title>Networked Target</title>
<para>
Instead of using a composite repository that lists locally built binary repositories,
you can also use a composite repository that
contains links to online repositories, for example
<code>http://download.eclipse.org/releases/luna</code> to obtain the correct version of Eclipse,
<code>http://download.controlsystemstudio.org/updates/4.1</code> for compiled CSS sources and so on.
</para>

<para>This option does not require you to first create the local binary repositories
by compiling the source code,
but IDE support for network links to repositories is fragile at the time of this writing.
</para>
</sect2>
</sect1>


<sect1 xml:id="sec_import_into_IDE">  <title>Import Sources Into IDE</title>

<para>
You only need to import the sources on which you want to work.
For example, you can import just the product sources, then start the product
within the IDE. All its dependencies, for example required <filename>cs-studio/core</filename>
plugins, will be obtained from the target platform, and you can even debug into them
in the source-level debugger.
</para>
<para>
If you want to work on plugins from <filename>cs-studio/applications</filename> or
<filename>cs-studio/core</filename>, you can later import them as needed.
</para>
<para>
To import the desired sources into the IDE:
</para>

<itemizedlist>
<listitem>In the IDE, select the menu <code>File/Import...</code>, <code>Maven</code>, <code>Existing Maven Project</code>.</listitem>
<listitem>As a root directory, you generally select the top-level directory as it was cloned from GIT,
          for example the <filename>maven-osgi-bundles</filename>, <filename>cs-studio-thirdparty</filename>
          or <filename>org.csstudio.product</filename> directory, which all contain a top-level <code>pom.xml</code>.
          For the <filename>cs-studio</filename> source tree, select either the 
          <filename>cs-studio/core</filename> or
          <filename>cs-studio/applications</filename> subdirectory,
          because <filename>cs-studio</filename> itself has no top-level <code>pom.xml</code>.
</listitem>
<listitem>Check the option <code>Add Projects to Working Set</code> and enter a suitable name.</listitem>
<listitem>Press <code>Finish</code>.</listitem>
</itemizedlist>

<para>In the Eclipse <code>Package Explorer</code><indexterm><primary>Project Explorer</primary></indexterm>,
select the view drop-down menu <code>Top Level Elements</code> and pick <code>Working Sets</code>.
</para>

<para>The IDE should now compile the imported sources.
With sources checked out from the <code>master</code> branch,
there should be no compilation errors.
If there are, check that the Eclipse Maven or Tycho support has not
changed the compilation settings.
At least with Eclipse 4.4.1 it tends to update the <code>.classpath</code>
files to match IDE settings.
In <xref linkend="fig_comp_search_prod"/>, note that the package
<code>org.csstudio.trends.databrowser2</code>
has a greater-than sign in front of its name.
This indicates that the source code has changed from the original version
obtained from Git. When comparing against the <code>HEAD Revision</code>,
you will find a modified <code>.classpath</code> file.
Select the files or directories that appear to have source code changes in the Package Explorer,
and use the context menu <code>Replace With</code>, <code>HEAD Revision</code>
to restore their original state. The automated recompilation of the IDE should now succeed.
</para>

<figure xml:id="fig_comp_ncomitted">  <title>Changed Files</title>
  <mediaobject>
    <imageobject><imagedata fileref="comp_uncomitted.png" width="50%" format="PNG"/></imageobject>
  </mediaobject>
</figure>


</sect1>

<sect1>  <title>Using Products in IDE</title>

<para>Open one of the <code>*.product</code> files, for example
<programlisting>org.csstudio.product/repository/cs-studio.product</programlisting>
or
<programlisting>cs-studio-SNS/repository/basic-epics.product</programlisting>

You can use the Eclipse <code>Search</code>, <code>File</code> menu to
locate all available product files as shown in <xref linkend="fig_comp_search_prod"/>
</para>

<figure xml:id="fig_comp_search_prod">  <title>Locating all Product Files</title>
  <mediaobject>
    <imageobject><imagedata fileref="comp_search_prod.png" width="75%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>When you open an Eclipse product file, it will be displayed as per <xref linkend="fig_comp_product"/>.
In the <code>Overview</code> tab, first press <code>Synchronize</code>,
then press <code>Launch an Eclipse Application</code> to run the product from within the IDE.
The product should start up.
</para>

<figure xml:id="fig_comp_product">  <title>Eclipse Product Editor</title>
  <mediaobject>
    <imageobject><imagedata fileref="comp_product.png" width="100%" format="PNG"/></imageobject>
  </mediaobject>
</figure>


<para>When running a product from within the IDE for the first time,
the main goal is that the product should <emphasis>start</emphasis>.
It may then stop because of missing command line arguments,
but there should be no errors regarding missing plugins or compilation problems.
</para>

<para>The product may not start up, instead reporting errors like
<quote>Product ....could not be found</quote> or <quote>Missing required bundle ...</quote>,
even though the Maven Build resulted in a product that starts without errors.
This results from the Maven Build automatically including required plugins, while
the IDE expects each plugin that you want to include in the product to be listed
in the product file or its features.
</para>
<para>Ideally, all products would include their dependencies such that the same
product file can be used by the Maven build as well as the IDE without changes.
Meanwhile, you can invoke the menu <code>Run</code>, <code>Run Configurations..</code>.
Locate the configuration for the product, open its <quote>Plug-ins</quote> tab.
Press <code>Validate Plug-Ins</code> to identify unresolved plugins, i.e. missing dependencies.
Either manually add the plugins that were reported as missing,
or try the <code>Add Required Plug-ins</code> button to add them automatically.
While the <code>Add Required Plug-ins</code> button is easier to use than the manual approach,
it tends to overzealously add test fragments to the procuct which are not actually required. 
</para>

<para>In the case of the command-line products like the Alarm Server it might soon exit with an error message indicating
that it requires command-line arguments.
It is of course trivial to provide command-line arguments when invoking such tools as intended from the shell.
During development and initial testing, though, it can be more convenient to execute CSS products
from within the IDE.
To add command-line arguments<indexterm><primary>Command-line arguments in IDE</primary></indexterm>
to products executed in the IDE,
invoke the menu <code>Run</code>, <code>Run Configurations..</code>.
Locate the configuration for the product, open its <quote>Arguments</quote> tab.
The <quote>Program Arguments</quote> section may already contain entries like
<code>-os ${target.os}</code>.
Add your desired command-line arguments to the end of the program arguments.
</para>

<para>Once you get the product to run: Congratulations!
Almost as easy as running the product is debugging<indexterm><primary>Debugging</primary></indexterm> it:
Instead of running the product again from the menu <code>Run</code>, <code>Run History</code>,
you select <code>Run</code>, <code>Debug History</code> to start the product in debug mode.
You can browse the source code, set breakpoints by double-clicking at the start of a source line,
then step through the code from the breakpoint on.
</para>
</sect1>


<sect1>  <title>JUnit Tests, Headless JUnit Tests</title>
<para>The Eclipse IDE has good support for executing
JUnit tests<indexterm><primary>JUnit test</primary></indexterm>
and test-driven development<indexterm><primary>Test-driven Development</primary></indexterm>
in general.
You can start many programming tasks by <emphasis>first</emphasis> implementing
the JUnit test, using the IDE <quote>Quick Fix</quote> feature to create
skeletons for the required classes and interfaces, which you then fill
with the actual code until the test passes.
</para>
<para>You will find several JUnit tests in the CSS plugin code because
a lot of it was implemented in a test-driven fashion.
These classes are often found in a <filename>test/</filename> source folder,
and the source files will be named <filename>*Test.java</filename> or <filename>*Demo.java</filename>.
</para>
<para>To execute a JUnit test, you simply right-click on the class file in the
Project Navigator and select <code>Run As</code>, <code>JUnit Test</code>.
Some tests will need configuration files to specify database URLs or other
site-specific parameters. Refer to comments in the source code for details.
</para>
<para>Eclipse supports a special type of JUnit test to allow testing
within the Eclipse runtime environment. This is necessary for tests that depend
on the Eclipse plugin registry and preference system.
Tests that require the plug-in runtime should be in source files
named <filename>*PluginTest.java</filename> or <filename>*HeadlessTest.java</filename>.
To execute them, select <code>Run As</code>, <code>JUnit Plug-in Test</code>
from the file context menu.
</para>
<para>When you invoke such a JUnit Plug-in Test<indexterm><primary>JUnit Plug-in Test</primary></indexterm>
for the first time, the IDE will create a run configuration that loads all
the plugins found in your workspace.
If the plugin containing your test refers to Eclipse user interface plugins,
the plugin test configuration will in addition start an instance of the complete Eclipse IDE
with all your workspace plugins, then execute the test.
This can take a long time and be overkill for what you want to test.
</para>
<para>A <quote>Headless</quote><indexterm><primary>Headless Plugin-in Test</primary></indexterm>
plugin test is a test that requires the Eclipse plugin runtime environment
but <emphasis>not</emphasis> the complete IDE user interface.
Such test source files are typically named <filename>*HeadlessTest.java</filename>.
To invoke such a test, you can once execute it via <code>Run As</code>, <code>JUnit Plug-in Test</code>
to create the basic run configuration, but then you should edit it as follows:
</para>
<itemizedlist>
<listitem>Menu <code>Run</code>, <code>Run Configurations...</code>
</listitem>
<listitem>Locate the <code>JUnit Plug-in Test</code> that was created for your headless test.</listitem>
<listitem>
<para>On the <code>Main</code> tab, select <code>Run an application</code> with the option
<code>[No Application] - Headless Mode</code>.
</para>
<para>This will significantly reduce the startup time of your test because you avoid a copy
of the Eclipse IDE.
</para>
</listitem>
<listitem>
<para>In the <code>Arguments</code> tab, you might need to add a program argument
<code>-pluginCustomization /path/to/your/settings.ini</code>
if your test needs certain preference settings.
</para>
</listitem>
<listitem>
<para>In the <code>Plug-ins</code> tab, by default all plugins in your workspace will be included.
You can change that to only include selected plug-ins, which can reduce the startup time
and might also be necessary to test the behavior of your test in case it depends
on certain other plugins being available or not.
</para>
</listitem>
</itemizedlist>
</sect1>


<sect1 xml:id="sec_prod_export_from_ide">  <title>Product Export from IDE</title>

<para>End users of CSS cannot be expected to open the IDE, install the source code,
and then run CSS from within the IDE. They need a product that executes
from their <quote>start</quote> menu or a desktop link.
The preferred way to create standalone products is via the Maven Build described
earlier in this chapter, because that results in a complete set of products
for all target architectures.
Occasionally, however, it can be faster to create a single standalone product for testing
by <quote>exporting</quote><indexterm><primary>Exporting a Product</primary></indexterm>
the product from the IDE.
</para>

<figure xml:id="fig_comp_export">  <title>Product Export Dialog</title>
  <mediaobject>
    <imageobject><imagedata fileref="comp_export.png" width="40%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>To export a product, open the product file that was already shown in <xref linkend="fig_comp_product"/>
and press the <code>Eclipse Product export wizard</code> link in the Overview tab.
This will open the Eclipse product export dialog, see <xref linkend="fig_comp_export"/>,
where you enter the following:
</para>

<orderedlist>
<listitem>
<para>As a Root Directory, enter the name of the product, for example ArchiveEngine, CSS, ...
You could include a version number, for example MyCSS-4.0.
</para>
<para>Use only a directory <emphasis>name</emphasis>, no path! This is the name of the directory that will
contain the generated executable and associated files.
</para>
</listitem>
<listitem>
<para>Enter a Directory <emphasis>path</emphasis> where the exported product should be placed,
for example <filename>/usr/fred/CSS/bin</filename>
</para>
<para>Enter a full path for this option! In the end, the name from the previous option
will be appended to this directory path, so your product will end up in a directory
similar to <filename>/usr/fred/CSS/bin/MyCSS-4.0</filename>.
</para>
<para>Also assert that the directory that you selected is <emphasis role="strong">empty</emphasis>!
When you export a product into a directory that already contains a product, maybe an older version
of the same product, Eclipse will attempt to add the new code to the existing content,
similar to an online update of an existing product.
That is probably not what you want, so export into a an empty directory.
</para>
</listitem>
<listitem>You might want to un-check the option to <quote>Generate metadata repository</quote></listitem>
<listitem>Finish</listitem>
</orderedlist>

<para>You should now have a directory like <filename>/usr/fred/CSS/bin/MyCSS-4.0</filename>
 that contains a <code>css</code> executable.
You can copy that directory to other computers and run it there.
One method of deployment would be to offer a ZIP file of the exported product on a web page. 
</para>

<para>If you left the option to
<quote>Generate metadata repository</quote> checked,
Eclipse will generate also an update repository,
see <xref linkend="chap_update_repo"/>.
</para>


<sect2> <title>Command-line Products for Windows</title>
<para>
Command-line applications, in Eclipse called
<quote>headless</quote><indexterm><primary>Headless RCP Application</primary></indexterm> RCP applications,
are invoked from a terminal window, i.e. the Linux shell, Mac OS X terminal, or Windows Command Prompt.
They are configured via command-line arguments, and they print information to the terminal.
</para>
<para>
<emphasis role="strong">
Note that there is currently a limitation for command-line products on Windows!
</emphasis>
Headless RCP applications work fine on Linux and Mac OS X, but in the Windows command line tool
<filename>cmd.exe</filename> you will by default <emphasis>not see any output from headless RCP applications</emphasis>.
The problem<indexterm><primary>Headless RCP Application Problem on Windows</primary></indexterm>
is related to the fact that Java for Windows includes both
<filename>javaw.exe</filename> and <filename>java.exe</filename> because Windows distinguishes
between GUI and console applications. <code>javaw -version</code> invoked in <code>cmd.exe</code>
will not display any output, either.
</para>

<para>Eclipse for Windows likewise includes launchers  
<filename>eclipse.exe</filename> and <filename>eclipsec.exe</filename>.
Headless products like an <filename>ArchiveEngine</filename>, <filename>AlarmServer</filename> etc.
should use <filename>eclipsec.exe</filename> as their launcher, but there is currently no
way to specify this in the product configuration, see also
the bug report on <quote>Support for exporting eclipsec.exe in RCP apps</quote>,
<link xlink:href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=185205">https://bugs.eclipse.org/bugs/show_bug.cgi?id=185205</link>.
</para>

<para>For the time being, the only solution is to manually replace the generated launcher, for example
<filename>AlarmServer.exe</filename>, with a copy of <filename>eclipsec.exe</filename>:
</para>
<programlisting>copy \path\to\eclipsec.exe AlarmServer.exe</programlisting>
<para>After replacing the original executable with a copy of <filename>eclipsec.exe</filename>,
you can invoke the <filename>AlarmServer.exe</filename> from within the Windows Command Prompt,
and you will see its command line output inside the Command Prompt window.
If you start the <filename>AlarmServer.exe</filename> via double-clicks from the Windows Explorer,
i.e. not from within a Command Prompt, it will actually open a new Command Prompt in which it can
then display command line output.
</para>
</sect2>

</sect1>


<sect1>  <title>Delta Pack, Cross-Platform Export</title>

<para>The product that you export from the IDE is by default limited to the operating system
on which it was exported because of the OS-dependent launcher and SWT libraries, see
<xref linkend="sec_rcp"/>.
To export code for different platforms, you need the Eclipse <quote>Delta Pack</quote><indexterm><primary>Delta Pack</primary></indexterm>.
With the Delta Pack installed, Eclipse on OS X can for example build products for Windows, Linux, and OS X.
Same for Linux and Windows.
</para>

<para>To obtain the delta pack:</para>

<orderedlist>
<listitem>Goto the Downloads section on <link xlink:href="http://www.eclipse.org/">http://www.eclipse.org/</link>.</listitem>
<listitem>Select <quote>Projects</quote>, <quote>Eclipse Project</quote>.</listitem>
<listitem>Select the version of Eclipse that you are using, for example 4.4.</listitem>
<listitem>Locate the Delta Pack, a file like <filename>eclipse-4.4-delta-pack.zip</filename>.</listitem>
</orderedlist>

<para>To use the delta pack:</para>

<orderedlist>
<listitem>Extract the delta pack archive into its own directory on disk.
The result should be an <filename>eclipse</filename> directory with sub-directories
<filename>plugins</filename> and <filename>features</filename>
</listitem>
<listitem>Open the Target Platform preferences:
Menu <code>Preferences</code>, <code>Plug-in Development</code>, <code>Target Platform</code>.
</listitem>
<listitem>Edit the active target. Add an <quote>Installation</quote>, using the path to the delta pack's
<filename>eclipse</filename> directory.
</listitem>
</orderedlist>

<para>When you now export a product from the IDE, there will be a new option
<quote>Export to multiple platforms</quote>.
</para>
</sect1>



<sect1>  <title>Feature Patch<indexterm><primary>Feature Patch</primary></indexterm></title>
<para>A side effect of the headless build and a P2-managed product
is that it is no longer possible to simply replace plugins in a product
with new versions.
If you replace a plugin JAR file with a different version, even if the
names exactly match, P2 will recognize the change because of checksums.
It will refuse to load the modified plugin, because it was part of the
original configuration.
In the spirit of maintaining a well defined product with known content,
this makes sense. Occasionally, however, it is a big nuisance:
Fixes to small bugs are no longer possible via basic plugin updates.
Instead, you have to create a new product by incrementing all version
numbers, perform a complete headless build, then publish the new product
and its repository on the update site.
</para>
<para>A feature patch can be used to update only part of a product
while maintaining full configuration control.
Assume our current product contains a plugin
<code>org.csstudio.trends.databrowser2</code>
with version number 3.0.1
that we intend to replace with a newer version 3.0.2.
We need to determine which feature provides that plugin
in the product-to-update, and we need to determine
its exact version, including a possible date/time qualifier.
If you do not know which feature provided the original plugin,
search the files in the <filename>features</filename> subdirectory
of the installed product. Assume we find that the plugin was
provided as part of the feature
</para>
<programlisting>org.csstudio.trends.databrowser2.feature_3.0.1.20110715
</programlisting>

<para>Create a new Feature Patch project in the Eclipse IDE:
</para>
<itemizedlist>
<listitem>As a project name you can for example use <quote>databrowser3.0.1.patch</quote>.
</listitem>
<listitem>In the <quote>Properties of feature being patched</quote> section
of the project wizard enter the
<quote>Feature ID</quote> of the original feature,
i.e. <code>org.csstudio.trends.databrowser2.feature</code>.
</listitem>
<listitem>Under <quote>Feature Version</quote> be sure to enter
the correct version that you intend to update,
i.e. <code>3.0.1.20110715</code>.
</listitem>
<listitem>Add the plugins that should be updated with the patch,
i.e. <code>org.csstudio.trends.databrowser2</code>.
The feature that we are patching might contain many more plugins,
but in the patch we only include what we want to add or replace.
Assert that the version numbers of all the plugins that you want
to replace have been incremented from their installed version.
</listitem>
</itemizedlist>

<para>You can now export the feature patch, using an archive file
like <filename>databrowser3.0.1.patch.zip</filename> as the target,
and then use that ZIP file to install the patch into your product
via the menu item <code>Help</code>, <code>Install New Software...</code>
by adding the ZIP file to the available software sites.
</para>
<para>As a result, the original <code>org.csstudio.trends.databrowser2</code>
plugin is replaced with the new one, while P2 remains fully aware of what
version of which plugin was installed from where, so it will for example
allow you to un-install the patch, or later add additional feature patches.
</para>
</sect1>

<sect1 xml:id="sec_headless_build">  <title>Headless Build</title>

<para>The Headless Build<indexterm><primary>Headless Build</primary></indexterm>
is similar to the Tycho/Maven Build, but using older tools.
Originally, it was the standard way to compile CSS source code from the command line,
for example as part of nightly builds.
It has been replaced by the Tycho/Maven Build.
</para>
</sect1>


</chapter>
