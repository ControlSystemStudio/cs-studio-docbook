<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"  version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap_compiling">
<title>Compiling, Running, Debugging CSS</title>

<para>End users of CSS, i.e. people who run CSS on their office computer,
should not have to compile CSS.
They can down-load a version of CSS that is already configured for use
in offices at their site from a local web site, and updates to CSS
will automatically be down-loaded from that same web site.
</para>

<para>To reach that stage, somebody at each institute that uses CSS
obviously needs to prepare such a local down-load site,
compile CSS with suitable settings and place the binaries on the web site.
Compilation from sources is also required for those parts of CSS that the end-user
does not see: Archive Engine, Alarm Server and tools to configure
the archive and alarm system.
</para>

<para>Fundamentally, the compilation of sources into stand-alone RCP products
that you can then deploy onto other computers is easy:
</para>
<orderedlist>
<listitem>Get Java and Eclipse</listitem>
<listitem>Get the CSS source code</listitem>
<listitem>Start Eclipse, import the sources</listitem>
<listitem>Open the <filename>*.product</filename> file for CSS, ArchiveEngine, ...
and <quote>Export</quote> as a stand-alone binary.</listitem>
</orderedlist>

<para>Instead of going to the last step, i.e. exporting a product from within the Eclipse
Integrated Development Environment (IDE)<indexterm><primary>Integrated Development Environment (IDE)</primary></indexterm>
into a deployable product, you have more options.
</para>
<para>While you are still developing and testing the version of CSS that you
assemble for use at your site, you can run the product within the IDE.
You can execute it without first exporting it into a stand-alone binary.
Running a product within the IDE is the preferred method during development
because it allows full source code debugging and minimizes
the turn-around time from editing the code to executing the product.
This is also what you should do when first trying to run CSS from source code.
</para>
<para>Once the product is acceptable for use at your site, you export
it from the IDE and install the result on the desired computers.
This is what you typically do for tools like the Archive Engine, Alarm Handler
or other non-end-user tools: Export and install.
</para>
<para>While the product export from the IDE is initially very convenient, it remains
a manual process. The <quote>Headless Build</quote> of a CSS product is a script-driven
process that can automate the product compilation.
It can also be used for automated integration builds.
As mentioned in <xref linkend="sec_rcp"/>, Eclipse products are operating system specific.
Eventually, most sites will implement a headless built for their primary end-user products,
because automated product generation is more repeatable, especially when creating several
products for various operating systems.
As a result of a headless build you typically get not only the binary products,
like CSS for your site for Windows and Linux in 32 and 64 bit versions.
In addition, you get a repository from which existing CSS products that are already
installed at your site can down-load updates.
</para>


<sect1>  <title>Prerequisites</title>

<para>You will need
<itemizedlist>
<listitem>Java Development Kit (JDK)<indexterm><primary>Java Development Kit, JDK</primary></indexterm>.
It should be the JDK, not just a java Runtime Environment (JRE).
It should be the Sun/Oracle or Apple JDK.
OpenJDK, the GNU Compiler for the Java (GCJ)
and other environments are currently not fully compatible
with the Sun/Oracle JDK.
</listitem>
<listitem>Eclipse IDE for RCP/Plugin Developers.
This has recently been called <quote>Eclipse for RCP and RAP Developers</quote>.
Other versions like <quote>Eclipse IDE for Java EE Developers</quote>
can be very useful if you also plan to do Web/Tomcat type of work,
but the RCP version of the Eclipse IDE is the one that includes
the full RCP source code and online help.
</listitem>
</itemizedlist>
Both the JDK and the RCP IDE might have to be of a specific version, ask other CSS developers
for the currently supported versions. 
At the time of this writing it has to be
Java Version 1.6 also known as Java 6,
and Eclipse 3.6 also known as Helios.
</para>
</sect1>


<sect1>  <title>Obtaining the Source Code</title>

<para>For your first steps in CSS, it might be best to obtain a
<emphasis>snapshot of the sources</emphasis> from one of the CSS sites.
Such a snapshot will include what you need to build the products
used at that site.
When you access the CSS source repository, you can see the latest version
of all sources from all CSS sites, which can be overwhelming.
</para>

<para>To obtain a source snapshot, follow the links
to collaborator sites on 
<link xlink:href="http://sourceforge.net/apps/trac/cs-studio/wiki">http://sourceforge.net/apps/trac/cs-studio/wiki</link>
and look for their source down-load.
</para>

<para>The complete CSS sources are in a shared
Source Forge<indexterm><primary>Source Forge</primary></indexterm><indexterm><primary>Source Code</primary></indexterm>
repository using the Mercurial version control system.
The project web site is
<link xlink:href="http://cs-studio.sourceforge.net/">http://cs-studio.sourceforge.net/</link>
You can view the sources here:
<link xlink:href="http://cs-studio.hg.sourceforge.net/hgweb/cs-studio/">http://cs-studio.hg.sourceforge.net/hgweb/cs-studio/</link>
</para>

<para>To work on the CSS source code, i.e. to be able to submit changes, several steps are necessary:</para>
<orderedlist>
<listitem>Obtain Source Forge account.</listitem>
<listitem>Contact one of the CSS developers to gain write access to the repository.</listitem>
<listitem>Become familiar with the Mercurial<indexterm><primary>Mercurial</primary></indexterm>
version control system. You can download it from
<link xlink:href="http://mercurial.selenic.com/">http://mercurial.selenic.com/</link>,
which also offers nice introductions.
</listitem>
<listitem>Install the HG Eclipse plugin which provides Eclipse <quote>Team</quote> support for Mercurial, see
<link xlink:href="http://www.javaforge.com/project/HGE">http://www.javaforge.com/project/HGE</link>.
</listitem>
</orderedlist>

<para>For details refer to the CSS wiki<indexterm><primary>Wiki, CSS Wiki</primary></indexterm>
at <link xlink:href="http://sourceforge.net/apps/trac/cs-studio/wiki">http://sourceforge.net/apps/trac/cs-studio/wiki</link>.
</para>

<para>In the following, we assume you are either already familiar with working on a 
Source Forge-hosted project, or you obtained a snapshot of the source code by other means,
for example via down-load from a site that uses CSS.
If you down-load the complete
source code from the Source Forge repository, you will receive a directory tree similar to this:</para>
<programlisting>core/features/org.csstudio.core.feature
core/features/org.csstudio. ... .feature
core/plugins/org.csstudio.data
core/plugins/org.csstudio.logging
core/plugins/org.csstudio...
applications/features/org.csstudio.opibuilder.feature
applications/features/org.csstudio. ... .feature
applications/plugins/org.csstudio.opibuilder
applications/plugins/org.csstudio.sds
applications/plugins/org.csstudio.trends.databrowser2
products/NSLS2/plugins/...
products/NSLS2/...
products/SNS/plugins/...
products/SNS/product/org.csstudio.basic.epics.product
built/...
</programlisting>

<para>The source code is roughly organized into</para>
<itemizedlist>
<listitem><code>core</code> plugins and features that are shared by many if not all sites that use CSS</listitem>
<listitem><code>applications</code> plugins and features that are several sites use</listitem>
<listitem><code>product</code> code that is specific to a site like NSLS2 or SNS</listitem>
</itemizedlist>

<para>If on the other hand you unpack a source code snapshot from a specific site, the
result might be a flat directory including only those sources used to build that
site's products:
</para>
<programlisting>org.csstudio.data
org.csstudio.logging
org.csstudio...
org.csstudio.opibuilder.feature
org.csstudio.opibuilder
org.csstudio.trends.databrowser2
org.csstudio.basic.epics.product
</programlisting>
</sect1>


<sect1 xml:id="sec_runnning_in_ide">  <title>IDE Example</title>

<para>Running an RCP product, and this includes CSS products, from the Eclipse IDE is fundamentally simple:
Open the product definition file, click <quote>Launch ...</quote>, done.
The most difficult part is the initial Workspace setup.
</para>

<para>When you start the Eclipse IDE for the first time, you will be prompted for a <code>Workspace</code><indexterm><primary>Workspace (IDE)</primary></indexterm>.
This is the directory where Eclipse keeps configuration parameters, for example your compiler settings.
The Workspace is <emphasis>not necessarily</emphasis> the same directory that
holds the source files. Eclipse will in fact not recognize source files that are simply placed in
the Workspace directory on your disk.
Your source files need to be <quote>imported</quote><indexterm><primary>Import sources into Workspace (IDE)</primary></indexterm>
into the workspace to be recognized by Eclipse.
</para>


<figure xml:id="fig_workspace_and_sources">  <title>Workspace and Source Code</title>
  <mediaobject>
    <imageobject><imagedata fileref="workspace.png" width="90%" format="PNG"/></imageobject>
  </mediaobject>
</figure>


<para>In the following, we assume that you have the sources in a directory like <filename>/usr/fred/CSS/Sources</filename>,
while your workspace is a separate directory <filename>/usr/fred/CSS/Workspace</filename>.
To import the sources into the workspace:
</para>

<itemizedlist>
<listitem>In the IDE, select the menu <code>File/Import...</code>, <code>General</code>, <code>Existing Projects into Workspace</code>.</listitem>
<listitem>As a root directory, select <filename>/usr/fred/CSS/Sources</filename>.</listitem>
<listitem><emphasis>Do not check the option </emphasis> <quote>Copy projects into workspace</quote>!</listitem>
<listitem>By default all the plugins on the disk will be selected.
You can leave them selected, or select only specific plugins as described below.</listitem>
<listitem>Press <code>Finish</code>.</listitem>
</itemizedlist>

<para>If you import from a source snapshot used by a CSS site, that snapshot might be limited
to the plugins that the site-specific products use, and you can simply import all plugins.
On the other hand, if you import from a full Source Forge repository checkout,
you might want to un-select plugins that you know you will not need because otherwise
you will end up with a workspace that is confusingly huge, even though you at best need
only half of the plugins in there.
</para>

<para>The problem might be that you have initially no idea which plugins you actually need.
You can leave them all selected, then later remove those from the workspace
that you find not to be needed for your products. When deleting plugin projects from the workspace,
do <emphasis>not</emphasis> check the option to <quote>Delete project contents on disk</quote>
which would delete the actual files. Instead, only delete the project from the workspace,
but leave it on the disk and thus also in the software repository.
</para>

<para>If you start with an initial selection of plugins that you assume you might need,
look for errors about missing plugin dependencies, then import the missing plugins.
Though this will initially require some trial and error, it might in the end be the most
convenient way.
</para>

<figure xml:id="fig_comp_explorer">  <title>Eclipse Project Explorer</title>
  <mediaobject>
    <imageobject><imagedata fileref="comp_explorer.png" width="40%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>The Eclipse <code>Project Explorer</code><indexterm><primary>Project Explorer</primary></indexterm>
should look similar to <xref linkend="fig_comp_explorer"/>.
It shows a flat list of plugins, even if the source directory tree has the plugins arranged
into sub-directories like <code>core</code> or <code>applications</code>.
It may take some time for Eclipse to compile all the sources.
There should be no errors, i.e. in the package explorer there should be no red marks on any plugin in the Project Explorer.
</para>

<figure xml:id="fig_comp_search_prod">  <title>Locating all Product Files</title>
  <mediaobject>
    <imageobject><imagedata fileref="comp_search_prod.png" width="100%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>Next you open one of the <code>*.product</code> files, for example
<programlisting>org.cs.studio.basic.epics.product/CSS.product</programlisting>

You can use the Eclipse <code>Search</code>, <code>File</code> menu to
locate all available product files as shown in <xref linkend="fig_comp_search_prod"/>
</para>

<figure xml:id="fig_comp_product">  <title>Eclipse Product Editor</title>
  <mediaobject>
    <imageobject><imagedata fileref="comp_product.png" width="100%" format="PNG"/></imageobject>
  </mediaobject>
</figure>

<para>When you open an Eclipse product file, it will be displayed as per <xref linkend="fig_comp_product"/>.
In the <code>Overview</code> tab, press <code>Synchronize</code>, <code>Launch an Eclipse Application</code> to run the product from within the IDE.
The product should start up.
</para>

<para>In the case of the Archive Engine it might soon exit with an error message indicating
that it requires more command-line arguments.
We will later describe how to <quote>export</quote> products from the IDE into standalone
executables, and with such an exported command-line tool it will of course be trivial
to provice command-line arguments when invoking the tool from the shell.
</para>

<para>During development and initial testing, though, it can be more convenient to execute CSS products
from within the IDE.
To add command-line arguments<indexterm><primary>Command-line arguments in IDE</primary></indexterm>
to products executed in the IDE,
invoke the menu <code>Run</code>, <code>Run Configurations..</code>.
Locate the configuration for the product, open its <quote>Arguments</quote> tab.
The <quote>Program Arguments</quote> section may already contain entries like
<code>-os ${target.os}</code>.
Add your desired command-line arguments to the end of the program arguments.
</para>

<para>When running a product from within the IDE for the first time,
the main goal is that the product should <emphasis>start</emphasis>.
It may then stop because of missing command line arguments,
but it should be no errors regarding missing plugins or compilation problems.
</para>

<para>If the product does not start up, and instead you get an error like
<quote>Product ....could not be found</quote> or <quote>Missing required bundle ...</quote>,
it can be helpful to open the menu <code>Run</code>, <code>Run Configurations..</code>.
Locate the configuration that was automatically created when you tried to launch the product.
On the <code>Plug-ins</code> tab, press <code>Validate Plug-Ins</code>.
It should give a list of unresolved plugins, i.e. missing dependencies.
</para>

<para>If you downloaded a consistent set of sources, you should have the missing plugins,
but maybe you did not import them into the workspace.
Import them, them add them to the run configuration by either manually selecting them
or via the button <code>Add Required Plug-Ins</code>.
</para>

<para>If you cannot find the missing plugins, there are usually two scenarios:
The missing plugins are part of Eclipse, and you are using a version of Eclipse that
is not compatible with the sources. For example, some plugin code may depend on 
<code>org.eclipse.core.runtime</code> version 3.6, but you are using Eclipse 3.5 which
is too old.
The other scenario would be that you obtained an inconsistent snapshot of the sources
where some part is simply missing. In that case you probably need to contact the maintainer
of the CSS product to determine why the product configuration has an error.
</para>

<para>If you get the product to run: Congratulations!
Almost as easy as running the product is debugging<indexterm><primary>Debugging</primary></indexterm> it:
Instead of running the product again from the menu <code>Run</code>, <code>Run History</code>,
you select <code>Run</code>, <code>Debug History</code> to start the product in debug mode.
You can browse the source code, set breakpoints by double-clicking at the start of a source line.
</para>
</sect1>


<sect1 xml:id="sec_prod_export_from_ide">  <title>Product Export from IDE</title>

<para>End users of CSS cannot be expected to open the IDE, install the source code,
and then run CSS from within the IDE. They need a product that executes
from their <quote>start</quote> menu or a desktop link.
One way to create such a standalone product is to
<quote>export</quote><indexterm><primary>Exporting a Product</primary></indexterm>
the product from the IDE.
</para>
<para>To export a product, open the product file as shown in <xref linkend="fig_comp_product"/>
and press the <code>Eclipse Product export wizard</code> link in the Overview tab.
</para>

<orderedlist>
<listitem>As a root directory, enter the name of the product (ArchiveEngine, CSS, ...)</listitem>
<listitem>Enter a directory where the exported product should be placed, for example <filename>/tmp</filename></listitem>
<listitem>You might want to uncheck the option to <quote>Generate metadata repository</quote></listitem>
<listitem>Finish</listitem>
</orderedlist>

<para>You should now have a directory like <filename>/tmp/CSS</filename> that contains a <code>CSS</code> executable.
You can copy that directory to other computers and run it there.
One method of deployment would be to offer a ZIP file of the exported product on a web page. 
</para>

<sect2> <title>Command-line Products for Windows</title>
<para>
Command-line applications, in Eclipse called
<quote>headless</quote><indexterm><primary>Headless RCP Application</primary></indexterm> RCP applications,
are invoked from a terminal window, i.e. the Linux shell, Mac OS X terminal, or Windows Command Prompt.
They are configured via command-line arguments, and they print information to the terminal.
</para>
<para>
<emphasis role="strong">
Note that there is currently a limitation for command-line products on Windows!
</emphasis>
Headless RCP applications work fine on Linux and Mac OS X, but in the Windows command line tool
<filename>cmd.exe</filename> you will by default <emphasis>not see any output from headless RCP applications</emphasis>.
The problem<indexterm><primary>Headless RCP Application Problem on Windows</primary></indexterm>
is related to the fact that Java for Windows includes both
<filename>javaw.exe</filename> and <filename>java.exe</filename> because Windows distinguishes
between GUI and console applications. <code>javaw -version</code> invoked in <code>cmd.exe</code>
will not display any output, either.
</para>

<para>Eclipse for Windows likewise includes launchers  
<filename>eclipse.exe</filename> and <filename>eclipsec.exe</filename>.
Headless products like an <filename>ArchiveEngine</filename>, <filename>AlarmServer</filename> etc.
should use <filename>eclipsec.exe</filename> as their launcher, but there is currently no
way to specify this in the product configuration, see also
the bug report on <quote>Support for exporting eclipsec.exe in RCP apps</quote>,
<link xlink:href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=185205">https://bugs.eclipse.org/bugs/show_bug.cgi?id=185205</link>.
</para>

<para>For the time being, the only solution is to manually replace the generated launcher, for example
<filename>AlarmServer.exe</filename>, with a copy of <filename>eclipsec.exe</filename>:
</para>
<programlisting>copy \path\to\eclipsec.exe AlarmServer.exe</programlisting>
<para>After replacing the original executable with a copy of <filename>eclipsec.exe</filename>,
you can invoke the <filename>AlarmServer.exe</filename> from within the Windows Command Prompt,
and you will see its command line output inside the Command Prompt window.
If you start the <filename>AlarmServer.exe</filename> via double-clicks from the Windows Explorer,
i.e. not from within a Command Prompt, it will actually open a new Command Prompt in which it can
then display command line output.
</para>
</sect2>

</sect1>


<sect1>  <title>Delta Pack, Cross-Platform Export</title>

<para>The product that you export from the IDE is by default limited to the operating system
on which it was exported because of the OS-dependent launcher and SWT libraries, see
<xref linkend="sec_rcp"/>.
To export code for different platforms, you need the Eclipse <quote>Delta Pack</quote><indexterm><primary>Delta Pack</primary></indexterm>.
With the Delta Pack installed, Eclipse on OS X can for example build products for Windows, Linux, and OS X.
Same for Linux. Eclipse on Windows can do this with limitations: The file permissions of the generated product for Linux will not be
executable because the Windows file system lacks that notion.
</para>

<para>To obtain the delta pack:</para>

<orderedlist>
<listitem>Goto the Downloads section on <link xlink:href="http://www.eclipse.org/">http://www.eclipse.org/</link>.</listitem>
<listitem>Select <quote>Projects</quote>, <quote>Eclipse Project</quote>.</listitem>
<listitem>Select the version of Eclipse that you are using, for example 3.6.2.</listitem>
<listitem>Locate the Delta Pack, a file like <filename>eclipse-3.6.2-delta-pack.zip</filename>.</listitem>
</orderedlist>

<para>To use the delta pack:</para>

<orderedlist>
<listitem>Extract the delta pack archive into its own directory on disk. The result should be a <filename>eclipse</filename> directory with sub-directories <filename>plugins</filename> and <filename>features</filename></listitem>
<listitem>Open the Target Platform preferences (Menu <code>Window</code>, <code>Preferences</code>, <code>Plug-in Development</code>, <code>Target Platform</code>).</listitem>
<listitem>Edit the active target. Add an <quote>Installation</quote>, using the path to the delta pack's <filename>eclipse</filename> directory.</listitem>
</orderedlist>

<para>When you now export a product from the IDE, there will be a new option <quote>Export to multiple platforms</quote>.</para>
</sect1>


<sect1>  <title>Headless Build</title>

<para>The Headless Build<indexterm><primary>Headless Build</primary></indexterm>
is eventually necessary for each site that periodically publishes CSS product updates.
It automates the build process, guaranteeing that the products are indeed exported for each supported platform.
It can also be used as part of a nightly or integration build.
</para>
<para>
A headless build, however, is more complicated to set up than the product export from the IDE.
The headless build does <emphasis>not</emphasis> use the workspace nor the graphical IDE.
Instead, it is command-line driven and expects to find all feature and plugin projects
in subdirectories of the build directory which have to be named <filename>features</filename>
respectively <filename>plugins</filename>.
This usually means that you need a shell script or a build file for <code>ant</code>
to copy all feature and plugin projects that are part of your product into such a build directory layout.
In addition, you need a file <filename>build.properties</filename> to specify which
product or feature to build, which target architectures to use, and how to name the generated
archive files.
</para>
<para>
For details, check the Eclipse online help for Headless Build,
or refer to the scripts that other CSS sites use to build their products,
which can be found in the <filename>build</filename> and <filename>products</filename>
subdirectories of the CSS sources.
</para>
<para>The result of a product generated by the headless build
should be a product that uses Eclipse P2<indexterm><primary>P2</primary></indexterm>
to maintain its installation state, and an update repository for updating older
versions of the product to the current state.
P2 tracks all the plugins and their versions that constitute the product.
The product can be updated to a newer version from an update site,
and in case of problems a product configuration can also be reverted
to a previous state.
</para>
</sect1>

<sect1>  <title>Feature Patch<indexterm><primary>Feature Patch</primary></indexterm></title>
<para>A side effect of the headless build and a P2-managed product
is that it is no longer possible to simply replace plugins in a product
with new versions.
If you replace a plugin JAR file with a different version, even if the
names exactly match, P2 will recognize the change because of checksums
and refuse to load the modified plugin.
In the spirit of maintaining a well defined product with known content,
this makes sense. Occasionally, however, it is a big nuisance because
quick updates to small bugs are no longer possible via basic plugin updates.
Instead, one would normally create a new product by incrementing all version
numbers, performing a complete headless build, then publishing the new product
and update site.
</para>
<para>A feature patch can be used to update only part of a product
while maintaining full configuration control.
Assume our current product contains a plugin
<code>org.csstudio.trends.databrowser2</code>
with version number 3.0.1
that we intend to replace with a newer version 3.0.2.
We need to determine which feature provides that plugin
in the product-to-update, and we need to determine
its exact version, including a possible date/time qualifier.
If you do not know which feature provided the original plugin,
search the files in the <filename>features</filename> subdirectory
of the installed product. Assume we find that the plugin was
provided as part of the feature
</para>
<programlisting>org.csstudio.trends.databrowser2.feature_3.0.1.20110715
</programlisting>

<para>Create a new Feature Patch project in the Eclipse IDE:
</para>
<itemizedlist>
<listitem>As a project name you can for example use <quote>databrowser3.0.1.patch</quote>.
</listitem>
<listitem>In the <quote>Properties of feature being patched</quote> section
of the project wizard enter the
<quote>Feature ID</quote> of the original feature,
i.e. <code>org.csstudio.trends.databrowser2.feature</code>.
</listitem>
<listitem>Under <quote>Feature Version</quote> be sure to enter
the correct version that you intend to update,
i.e. <code>3.0.1.20110715</code>.
</listitem>
<listitem>Add the plugins that should be updated with the patch,
i.e. <code>org.csstudio.trends.databrowser2</code>.
The feature that we are patching might contain many more plugins,
but in the patch we only include what we want to add or replace.
Assert that the version numbers plugin that you want to reaplace
are updated from their installed version.
</listitem>
</itemizedlist>

<para>You can now export the feature patch, using an archive file
like <filename>databrowser3.0.1.patch.zip</filename> as the target,
and then use that ZIP file to install the patch into your product
via the menu item <code>Help</code>, <code>Install New Software...</code>
by adding the ZIP file to the available software sites.
</para>
<para>As a result, the original <code>org.csstudio.trends.databrowser2</code>
plugin is replaced with the new one, while P2 remains fully aware of what
version of which plugin was installed from where.
</para>
</sect1>

</chapter>
